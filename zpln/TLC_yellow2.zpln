{"paragraphs":[{"text":"// Import packages.\r\nimport spark.implicits._\r\nimport org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.expressions._\r\nimport org.apache.spark.sql.functions._","user":"anonymous","dateUpdated":"2025-09-29T19:22:38+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.functions._\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164842_1821388658","id":"paragraph_1758800942263_1699247237","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:22:38+0000","dateFinished":"2025-09-29T19:22:41+0000","status":"FINISHED","focus":false},{"text":"// Import of TCL data:\r\n\r\n// Define Schema for TCL.\r\nval refPath = \"/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\"\r\nval refSchema = spark.read.parquet(refPath).schema\r\n\r\n// Define path for datafiles.\r\n\r\nval base = (\"/sparkio/TLC/trips/2025/yellow*.parquet\")\r\n\r\n// Load data into a DataFrame.\r\nval df = spark.read\r\n\t.option(\"recursiveFileLookup\", true)\r\n\t.schema(refSchema)\r\n\t.parquet(base)\r\n\r\n// Validate results.\r\nprint(\"Yellow df\\n\")\r\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:22:41+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Yellow df\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mrefPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\n\u001b[1m\u001b[34mrefSchema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(VendorID,IntegerType,true),StructField(tpep_pickup_datetime,TimestampNTZType,true),StructField(tpep_dropoff_datetime,TimestampNTZType,true),StructField(passenger_count,LongType,true),StructField(trip_distance,DoubleType,true),StructField(RatecodeID,LongType,true),StructField(store_and_fwd_flag,StringType,true),StructField(PULocationID,IntegerType,true),StructField(DOLocationID,IntegerType,true),StructField(payment_type,LongType,true),StructField(fare_amount,DoubleType,true),StructField(extra,DoubleType,true),StructField(mta_tax,DoubleType,true),StructField(tip_amount,DoubleType,true),Struct...\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=0"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=1"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164843_595469614","id":"paragraph_1758709945880_146464691","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:22:41+0000","dateFinished":"2025-09-29T19:23:01+0000","status":"FINISHED","focus":false},{"text":"// Get an overview of DataTypes\r\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-09-29T19:23:01+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- VendorID: integer (nullable = true)\n |-- tpep_pickup_datetime: timestamp_ntz (nullable = true)\n |-- tpep_dropoff_datetime: timestamp_ntz (nullable = true)\n |-- passenger_count: long (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: long (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: long (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164844_1721960892","id":"paragraph_1758709953008_258404744","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:01+0000","dateFinished":"2025-09-29T19:23:02+0000","status":"FINISHED","focus":false},{"text":"// Count number of rows in df.\r\ndf.count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:02+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres4\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=2"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=3"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164844_905805006","id":"paragraph_1758709965325_457090261","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:02+0000","dateFinished":"2025-09-29T19:23:06+0000","status":"FINISHED"},{"text":"// Build trip_duration_min, hour_of_day, day_of_week.\r\nval dfWithSpeed =\r\n  df\r\n    .withColumn(\"pickup_day\", col(\"tpep_pickup_datetime\").cast(\"timestamp\"))\r\n    .withColumn(\"dropoff_day\", col(\"tpep_dropoff_datetime\").cast(\"timestamp\"))\r\n    .withColumn(\"pickup_sec\",  col(\"tpep_pickup_datetime\").cast(\"timestamp\").cast(\"long\"))\r\n    .withColumn(\"dropoff_sec\", col(\"tpep_dropoff_datetime\").cast(\"timestamp\").cast(\"long\"))\r\n    // duration in hours.\r\n    .withColumn(\"duration_hours\",\r\n      (col(\"dropoff_sec\") - col(\"pickup_sec\")) / 3600.0\r\n    )\r\n    // speed = miles / hours.\r\n    .withColumn(\r\n      \"Speed_miles_pr_hour\",\r\n      when(col(\"duration_hours\") > 0,\r\n           col(\"trip_distance\") / col(\"duration_hours\")\r\n      ).otherwise(lit(null).cast(\"double\"))\r\n    )\r\n    // Travel duration in minutes.\r\n    .withColumn(\r\n        \"trip_duration_min\",\r\n        when(not(col(\"duration_hours\").isNull),\r\n            col(\"duration_hours\") * 60\r\n        ).otherwise(lit(null).cast(\"double\"))\r\n    )\r\n    .drop(\"pickup_sec\",\"dropoff_sec\",\"duration_hours\")\r\n    .withColumn(\"Speed_miles_pr_hour\", round(col(\"Speed_miles_pr_hour\"), 2))\r\n    .withColumn(\"trip_duration_min\", round(col(\"trip_duration_min\"), 2))\r\n    .withColumn(\"hour_of_day\", date_format(col(\"pickup_day\"), \"k\"))\r\n    .withColumn(\"pickup_day\", dayofweek(col(\"pickup_day\")))\r\n    .withColumn(\"dropoff_day\", dayofweek(col(\"dropoff_day\")))","user":"anonymous","dateUpdated":"2025-09-29T19:23:06+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mdfWithSpeed\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164845_475173900","id":"paragraph_1758709974371_852573265","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:06+0000","dateFinished":"2025-09-29T19:23:07+0000","status":"FINISHED"},{"text":"// Validate that numbers of rows are the same.\r\nprint(df.count())\r\nprint(\"\\n\")\r\nprint(dfWithSpeed.count())","user":"anonymous","dateUpdated":"2025-09-29T19:23:07+0000","progress":5,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"27982347\n27982347"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=4"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=5"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=6"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=7"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164845_1363645028","id":"paragraph_1758710124171_1829139088","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:07+0000","dateFinished":"2025-09-29T19:23:09+0000","status":"FINISHED"},{"text":"// Validate that hour_of_day contains different values.\r\ndfWithSpeed.select(\"hour_of_day\").filter(\"hour_of_day < 24\").show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:23:09+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+\n|hour_of_day|\n+-----------+\n|1          |\n|1          |\n|23         |\n+-----------+\nonly showing top 3 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=8"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164845_1747893537","id":"paragraph_1758717074256_881532945","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:09+0000","dateFinished":"2025-09-29T19:23:11+0000","status":"FINISHED"},{"text":"// Validate content of new df.\r\ndfWithSpeed.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:23:11+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=9"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164846_111010085","id":"paragraph_1758710811789_317725629","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:11+0000","dateFinished":"2025-09-29T19:23:13+0000","status":"FINISHED"},{"text":"// Counting rows with higher speed than 80miler/hour.\r\ndfWithSpeed.filter(col(\"Speed_miles_pr_hour\") > 80 || col(\"Speed_miles_pr_hour\").isNull).count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:13+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres8\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 260984\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=10"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=11"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164846_1130796585","id":"paragraph_1758711328608_1561838832","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:13+0000","dateFinished":"2025-09-29T19:23:26+0000","status":"FINISHED"},{"text":"// Creating a new df excluding rows where speed > 80 or speed == NULL.\r\nval dfWithSpeedRmHighSpeedAndNull = dfWithSpeed.filter(col(\"Speed_miles_pr_hour\") <= 80)\r\ndfWithSpeedRmHighSpeedAndNull.count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:26+0000","progress":56,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mdfWithSpeedRmHighSpeedAndNull\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n\u001b[1m\u001b[34mres9\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27721363\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=12"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=13"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164846_1989909231","id":"paragraph_1758710034070_1609028709","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:26+0000","dateFinished":"2025-09-29T19:23:32+0000","status":"FINISHED"},{"text":"// Validate that exluded rows matches count on rows with higher speed than 80miler/hour.\r\ndfWithSpeedRmHighSpeedAndNull.count() - df.count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:32+0000","progress":6,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres10\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = -260984\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=14"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=15"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=16"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=17"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164847_1775561965","id":"paragraph_1758710528185_713388709","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:32+0000","dateFinished":"2025-09-29T19:23:39+0000","status":"FINISHED"},{"text":"// Make df with exluded speed rows the new main df.\r\nval df = dfWithSpeedRmHighSpeedAndNull\r\n// Validate content of new main df.\r\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:23:39+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=18"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164847_1255643275","id":"paragraph_1758711240168_963644572","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:39+0000","dateFinished":"2025-09-29T19:23:40+0000","status":"FINISHED"},{"text":"// Count rows where total_amout is 0 or lower.\r\ndf.filter(col(\"total_amount\") <= 0).count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:41+0000","progress":87,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres12\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 526220\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=19"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=20"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164847_1537174188","id":"paragraph_1758712911418_2090325407","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:41+0000","dateFinished":"2025-09-29T19:23:50+0000","status":"FINISHED"},{"text":"// Create new df excluding rows where total_amount is 0 or lower.\r\nval PositiveFare = df.filter(col(\"total_amount\") > 0)","user":"anonymous","dateUpdated":"2025-09-29T19:23:50+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mPositiveFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164848_1612944541","id":"paragraph_1758712245318_585415575","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:50+0000","dateFinished":"2025-09-29T19:23:51+0000","status":"FINISHED"},{"text":"// Validate that number of excluded rows match the number of 0 or negative values in total_amount.\r\nPositiveFare.count() - df.count()","user":"anonymous","dateUpdated":"2025-09-29T19:23:51+0000","progress":62,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres13\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = -526220\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=21"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=22"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=23"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=24"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164848_2057116181","id":"paragraph_1758712555738_726244875","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:23:51+0000","dateFinished":"2025-09-29T19:24:02+0000","status":"FINISHED"},{"text":"// Make df with excluded 0 or negative values in total_amount the new main df.\r\nval df = PositiveFare\r\n// Validate content of new main df.\r\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:02+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=25"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164848_1756913152","id":"paragraph_1758712868552_1390517759","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:02+0000","dateFinished":"2025-09-29T19:24:03+0000","status":"FINISHED"},{"text":"// New df excluding rows where number of passanger are 0 or lower.\r\nval passengerMoreThanZero = df.filter(col(\"passenger_count\") > 0)","user":"anonymous","dateUpdated":"2025-09-29T19:24:03+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mpassengerMoreThanZero\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164849_192537589","id":"paragraph_1758713059042_72184826","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:03+0000","dateFinished":"2025-09-29T19:24:04+0000","status":"FINISHED"},{"text":"// Controlling the number of rows with 0 or less passangers.\r\npassengerMoreThanZero.count() - df.count()","user":"anonymous","dateUpdated":"2025-09-29T19:24:04+0000","progress":43,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres15\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = -6572238\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=26"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=27"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=28"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=29"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164849_119585840","id":"paragraph_1758713161110_811419378","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:04+0000","dateFinished":"2025-09-29T19:24:14+0000","status":"FINISHED"},{"text":"// Make df excluding 0 or less passangers the new main df.\r\nval df = passengerMoreThanZero\r\n// Validating content of new df\r\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:14+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=30"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164849_1178203212","id":"paragraph_1758713183056_2112796230","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:14+0000","dateFinished":"2025-09-29T19:24:16+0000","status":"FINISHED"},{"text":"// Controlling the number of remaining rows in main df.\r\ndf.count()","user":"anonymous","dateUpdated":"2025-09-29T19:24:16+0000","progress":68,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mres17\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 20622905\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=31"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=32"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164850_1651244036","id":"paragraph_1758713262860_1105210915","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:16+0000","dateFinished":"2025-09-29T19:24:21+0000","status":"FINISHED"},{"text":"// New check on datatypes in main df.\r\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-09-29T19:24:21+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- VendorID: integer (nullable = true)\n |-- tpep_pickup_datetime: timestamp_ntz (nullable = true)\n |-- tpep_dropoff_datetime: timestamp_ntz (nullable = true)\n |-- passenger_count: long (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: long (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: long (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n |-- pickup_day: integer (nullable = true)\n |-- dropoff_day: integer (nullable = true)\n |-- Speed_miles_pr_hour: double (nullable = true)\n |-- trip_duration_min: double (nullable = true)\n |-- hour_of_day: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164850_1526650793","id":"paragraph_1758739914273_557874808","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:21+0000","dateFinished":"2025-09-29T19:24:22+0000","status":"FINISHED"},{"text":"// Option 1 (which I personally prefer)\r\n// Create a df containing the date and the number of trips.\r\nval daily_trips = df\r\n    .withColumn(\"dates\", col(\"tpep_pickup_datetime\").cast(\"timestamp\"))\r\n    .groupBy(to_date(col(\"dates\")).as(\"date\"))\r\n    .agg(count(lit(1)).as(\"number_of_trips\"))\r\n    .orderBy(col(\"date\"))\r\ndaily_trips.show(truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:22+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+---------------+\n|date      |number_of_trips|\n+----------+---------------+\n|2007-12-05|1              |\n|2009-01-01|2              |\n|2024-12-31|20             |\n|2025-01-01|71524          |\n|2025-01-02|78563          |\n|2025-01-03|84854          |\n|2025-01-04|90226          |\n|2025-01-05|73238          |\n|2025-01-06|73777          |\n|2025-01-07|89624          |\n|2025-01-08|96928          |\n|2025-01-09|101066         |\n|2025-01-10|95176          |\n|2025-01-11|100477         |\n|2025-01-12|82139          |\n|2025-01-13|85860          |\n|2025-01-14|101109         |\n|2025-01-15|103820         |\n|2025-01-16|110888         |\n|2025-01-17|96830          |\n+----------+---------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mdaily_trips\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: date, number_of_trips: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=33"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=34"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164851_1730533670","id":"paragraph_1758713269081_36045802","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:22+0000","dateFinished":"2025-09-29T19:24:30+0000","status":"FINISHED"},{"text":"// Option 2\r\n// Create a df containing the date and the number of trips.\r\nval daily_trips2 = df\r\n    .withColumn(\"pickup\", col(\"tpep_pickup_datetime\").cast(\"timestamp\"))\r\n    .withColumn(\"date\", date_trunc(\"DAY\", col(\"pickup\")))\r\n    .groupBy(\"date\")\r\n    .count().as(\"number_of_trips\")\r\n    .orderBy(\"date\")\r\n\r\ndaily_trips2.show(truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:30+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------+\n|date               |count |\n+-------------------+------+\n|2007-12-05 00:00:00|1     |\n|2009-01-01 00:00:00|2     |\n|2024-12-31 00:00:00|20    |\n|2025-01-01 00:00:00|71524 |\n|2025-01-02 00:00:00|78563 |\n|2025-01-03 00:00:00|84854 |\n|2025-01-04 00:00:00|90226 |\n|2025-01-05 00:00:00|73238 |\n|2025-01-06 00:00:00|73777 |\n|2025-01-07 00:00:00|89624 |\n|2025-01-08 00:00:00|96928 |\n|2025-01-09 00:00:00|101066|\n|2025-01-10 00:00:00|95176 |\n|2025-01-11 00:00:00|100477|\n|2025-01-12 00:00:00|82139 |\n|2025-01-13 00:00:00|85860 |\n|2025-01-14 00:00:00|101109|\n|2025-01-15 00:00:00|103820|\n|2025-01-16 00:00:00|110888|\n|2025-01-17 00:00:00|96830 |\n+-------------------+------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mdaily_trips2\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: timestamp, count: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=35"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=36"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164851_87997970","id":"paragraph_1758713358149_746354726","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:30+0000","dateFinished":"2025-09-29T19:24:38+0000","status":"FINISHED"},{"text":"// Create a df finding the median of each trip duration in minuttes.\r\nval median_duration = df.select(\"trip_duration_min\")\r\nmedian_duration.select(median(col(\"trip_duration_min\")).as(\"median_trip_duration\")).show()","user":"anonymous","dateUpdated":"2025-09-29T19:24:38+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|median_trip_duration|\n+--------------------+\n|               12.17|\n+--------------------+\n\n\u001b[1m\u001b[34mmedian_duration\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [trip_duration_min: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=37"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=38"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164851_2000897738","id":"paragraph_1758739874034_1715019148","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:38+0000","dateFinished":"2025-09-29T19:24:48+0000","status":"FINISHED"},{"text":"// Create a df finding the total fare for each date.\r\nval total_fare_by_day = df\r\n    .withColumn(\"dates\", col(\"tpep_pickup_datetime\").cast(\"timestamp\"))\r\n    .groupBy(to_date(col(\"dates\")).as(\"date\"))\r\n    .agg(round(sum(col(\"total_amount\")), 2).as(\"total_fare_by_day\"))\r\n    .orderBy(col(\"date\"))\r\n\r\ntotal_fare_by_day.show(truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:48+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+-----------------+\n|date      |total_fare_by_day|\n+----------+-----------------+\n|2007-12-05|22.75            |\n|2009-01-01|170.27           |\n|2024-12-31|519.87           |\n|2025-01-01|2133149.93       |\n|2025-01-02|2342147.83       |\n|2025-01-03|2400697.83       |\n|2025-01-04|2432004.75       |\n|2025-01-05|2176739.42       |\n|2025-01-06|2143768.44       |\n|2025-01-07|2441461.95       |\n|2025-01-08|2587399.41       |\n|2025-01-09|2767687.81       |\n|2025-01-10|2638094.9        |\n|2025-01-11|2579289.23       |\n|2025-01-12|2320849.8        |\n|2025-01-13|2410455.72       |\n|2025-01-14|2749768.15       |\n|2025-01-15|2828314.87       |\n|2025-01-16|3074961.78       |\n|2025-01-17|2711745.5        |\n+----------+-----------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mtotal_fare_by_day\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: date, total_fare_by_day: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=39"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=40"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164852_49847725","id":"paragraph_1758751459473_213356178","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:48+0000","dateFinished":"2025-09-29T19:24:56+0000","status":"FINISHED","focus":false},{"text":"// Import of MapZone data:\r\n\r\n//File location.\r\nval base = (\"/sparkio/TLC/mapZones/taxi_zone_lookup.csv\")\r\n\r\n// Custom schema (LocationID got defined as a string without).\r\nval zoneSchema = StructType(Array(\r\n    StructField(\"LocationID\", IntegerType, true),\r\n    StructField(\"Borough\", StringType, true),\r\n    StructField(\"Zone\", StringType, true),\r\n    StructField(\"service_zone\", StringType, true)\r\n))\r\n\r\n// Import of data to df.\r\nval dfZone = spark.read\r\n\t.option(\"header\", \"true\")\r\n    .schema(zoneSchema)\r\n    .csv(base)\r\n\r\n// Validating content of new df.\r\ndfZone.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:56+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+-------+-----------------------+------------+\n|LocationID|Borough|Zone                   |service_zone|\n+----------+-------+-----------------------+------------+\n|1         |EWR    |Newark Airport         |EWR         |\n|2         |Queens |Jamaica Bay            |Boro Zone   |\n|3         |Bronx  |Allerton/Pelham Gardens|Boro Zone   |\n+----------+-------+-----------------------+------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mbase\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/mapZones/taxi_zone_lookup.csv\n\u001b[1m\u001b[34mzoneSchema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(LocationID,IntegerType,true),StructField(Borough,StringType,true),StructField(Zone,StringType,true),StructField(service_zone,StringType,true))\n\u001b[1m\u001b[34mdfZone\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [LocationID: int, Borough: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=41"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164852_1362070881","id":"paragraph_1758752463137_28453430","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:56+0000","dateFinished":"2025-09-29T19:24:57+0000","status":"FINISHED","focus":false},{"text":"// Validation of datatypes on df.\r\ndfZone.printSchema()","user":"anonymous","dateUpdated":"2025-09-29T19:24:57+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- LocationID: integer (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Zone: string (nullable = true)\n |-- service_zone: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164852_1706385567","id":"paragraph_1758753310157_1864144852","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:58+0000","dateFinished":"2025-09-29T19:24:58+0000","status":"FINISHED"},{"text":"// Droping unnecessarily columns and valdidating new content of df.\r\ndfZone.drop(\"service_zone\").show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:58+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+-------+-----------------------+\n|LocationID|Borough|Zone                   |\n+----------+-------+-----------------------+\n|1         |EWR    |Newark Airport         |\n|2         |Queens |Jamaica Bay            |\n|3         |Bronx  |Allerton/Pelham Gardens|\n+----------+-------+-----------------------+\nonly showing top 3 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=42"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164852_1715145371","id":"paragraph_1758753323615_1365918106","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:58+0000","dateFinished":"2025-09-29T19:24:58+0000","status":"FINISHED"},{"text":"// Create new df to contain location names corresponding with locationIDs.\r\n// Two left joins to add pickup and dropoff location names.\r\nval dfWithLocationNames =\r\n  df.alias(\"m\")\r\n    .join(dfZone.alias(\"zpu\"),\r\n        col(\"m.PULocationID\") === col(\"zpu.LocationID\"),\r\n        \"left\")\r\n    .join(dfZone.alias(\"zdo\"),\r\n        col(\"m.DOLocationID\") === col (\"zdo.LocationID\"),\r\n        \"left\")\r\n    .select(col(\"m.*\"),\r\n        col(\"zpu.Zone\").as(\"pickup_location_name\"),\r\n        col(\"zdo.Zone\").as(\"dropoff_location_name\"))\r\n\r\n// Validate content of new df.\r\ndfWithLocationNames.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:24:58+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|pickup_location_name         |dropoff_location_name|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |Sutton Place/Turtle Bay North|Upper East Side South|\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |Upper East Side North        |Upper East Side South|\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |Lenox Hill West              |Lenox Hill West      |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdfWithLocationNames\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 25 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=43"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=44"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164853_2009001309","id":"paragraph_1758755437080_1609630726","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:24:58+0000","dateFinished":"2025-09-29T19:25:00+0000","status":"FINISHED"},{"text":"// Controll that location get right placing in dfWithLocationNames\r\ndfZone.filter(\"LocationID = 237\").select(\"Zone\").show()","user":"anonymous","dateUpdated":"2025-09-29T19:25:00+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|                Zone|\n+--------------------+\n|Upper East Side S...|\n+--------------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=45"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164853_2118320197","id":"paragraph_1758755628657_1738231895","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:00+0000","dateFinished":"2025-09-29T19:25:01+0000","status":"FINISHED"},{"text":"// Make df with location names included the new main df.\r\nval df = dfWithLocationNames\r\n\r\n// Validate content of new main df.\r\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:25:01+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|pickup_location_name         |dropoff_location_name|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\n|1       |2025-01-01 00:18:38 |2025-01-01 00:26:59  |1              |1.6          |1         |N                 |229         |237         |1           |10.0       |3.5  |0.5    |3.0       |0.0         |1.0                  |18.0        |2.5                 |0.0        |0.0               |4         |4          |11.5               |8.35             |24         |Sutton Place/Turtle Bay North|Upper East Side South|\n|1       |2025-01-01 00:32:40 |2025-01-01 00:35:13  |1              |0.5          |1         |N                 |236         |237         |1           |5.1        |3.5  |0.5    |2.02      |0.0         |1.0                  |12.12       |2.5                 |0.0        |0.0               |4         |4          |11.76              |2.55             |24         |Upper East Side North        |Upper East Side South|\n|1       |2025-01-01 00:44:04 |2025-01-01 00:46:01  |1              |0.6          |1         |N                 |141         |141         |1           |5.1        |3.5  |0.5    |2.0       |0.0         |1.0                  |12.1        |2.5                 |0.0        |0.0               |4         |4          |18.46              |1.95             |24         |Lenox Hill West              |Lenox Hill West      |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------------+---------------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 25 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=46"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=47"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164853_1939414690","id":"paragraph_1758757856402_538611495","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:01+0000","dateFinished":"2025-09-29T19:25:02+0000","status":"FINISHED"},{"text":"// Validate schema on new main df.\r\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-09-29T19:25:02+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- VendorID: integer (nullable = true)\n |-- tpep_pickup_datetime: timestamp_ntz (nullable = true)\n |-- tpep_dropoff_datetime: timestamp_ntz (nullable = true)\n |-- passenger_count: long (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: long (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: long (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n |-- pickup_day: integer (nullable = true)\n |-- dropoff_day: integer (nullable = true)\n |-- Speed_miles_pr_hour: double (nullable = true)\n |-- trip_duration_min: double (nullable = true)\n |-- hour_of_day: string (nullable = true)\n |-- pickup_location_name: string (nullable = true)\n |-- dropoff_location_name: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164854_1058616333","id":"paragraph_1758799215916_329717716","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:02+0000","dateFinished":"2025-09-29T19:25:03+0000","status":"FINISHED"},{"text":"// new df containing a decending list of trip volume per location.\r\nval topTripVolume = df\r\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\r\n\t.groupBy(col(\"zone\"))\r\n\t.agg(count(col(\"pickup_location_name\")).as(\"trip_volume\"))\r\n\t.orderBy(desc(\"trip_volume\"))\r\n\r\ntopTripVolume.show(10, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:25:03+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------+-----------+\n|zone                        |trip_volume|\n+----------------------------+-----------+\n|JFK Airport                 |1071452    |\n|Upper East Side South       |1059958    |\n|Midtown Center              |1043638    |\n|Upper East Side North       |910008     |\n|Penn Station/Madison Sq West|775933     |\n|Midtown East                |758521     |\n|Times Sq/Theatre District   |745292     |\n|LaGuardia Airport           |699497     |\n|Lincoln Square East         |662939     |\n|Midtown North               |614640     |\n+----------------------------+-----------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripVolume\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, trip_volume: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=48"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=49"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=50"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=51"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164854_1072189073","id":"paragraph_1758761434185_608791302","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:03+0000","dateFinished":"2025-09-29T19:25:11+0000","status":"FINISHED"},{"text":"// new df containing a decending list of total fare per location.\r\nval topTripTotalFare = df\r\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\r\n\t.groupBy(col(\"zone\"))\r\n\t.agg(round(sum(\"total_amount\"), 2).as(\"total_fare\"))\r\n\t.orderBy(desc(\"total_fare\"))\r\n\r\ntopTripTotalFare.show(10, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:25:11+0000","progress":100,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------+-------------+\n|zone                        |total_fare   |\n+----------------------------+-------------+\n|JFK Airport                 |8.745772521E7|\n|LaGuardia Airport           |4.902748448E7|\n|Midtown Center              |2.715074768E7|\n|Upper East Side South       |2.195396198E7|\n|Times Sq/Theatre District   |2.140392085E7|\n|Penn Station/Madison Sq West|1.958436281E7|\n|Upper East Side North       |1.908805917E7|\n|Midtown East                |1.882810439E7|\n|Midtown North               |1.568490028E7|\n|Lincoln Square East         |1.476928993E7|\n+----------------------------+-------------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripTotalFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, total_fare: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=52"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=53"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=54"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=55"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164855_249267410","id":"paragraph_1758762120460_1303966205","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:11+0000","dateFinished":"2025-09-29T19:25:20+0000","status":"FINISHED"},{"text":"// new df containing a decending list of average tip per location.\r\nval topTripAvgTip = df\r\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\r\n\t.groupBy(col(\"zone\"))\r\n\t.agg(round(avg(\"tip_amount\"), 2).as(\"average_tip\"))\r\n\t.orderBy(desc(\"average_tip\"))\r\n\r\ntopTripAvgTip.show(10, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:25:20+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------------------------------+-----------+\n|zone                                         |average_tip|\n+---------------------------------------------+-----------+\n|West Brighton                                |33.72      |\n|Oakwood                                      |22.57      |\n|Rossville/Woodrow                            |17.49      |\n|New Dorp/Midland Beach                       |16.25      |\n|Astoria Park                                 |15.9       |\n|Bloomfield/Emerson Hill                      |13.86      |\n|Governor's Island/Ellis Island/Liberty Island|11.5       |\n|Newark Airport                               |9.63       |\n|JFK Airport                                  |9.36       |\n|LaGuardia Airport                            |9.27       |\n+---------------------------------------------+-----------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripAvgTip\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, average_tip: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=56"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=57"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=58"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=59"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164855_1743096587","id":"paragraph_1758762734756_1761667715","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:20+0000","dateFinished":"2025-09-29T19:25:29+0000","status":"FINISHED"},{"text":"// A solution that rank the top 5 pickup zones by total fare.\r\n// Implemented with window, partitionBy and dense_rank.\r\n\r\n// Build a new df containing pickup dates, zone name and total fare.\r\nval topFiveZonByTotFare = df\r\n    .withColumn(\r\n        \"day\",\r\n        col(\"tpep_pickup_datetime\").cast(\"timestamp\")\r\n        )\r\n    .withColumn(\r\n        \"week_day\",\r\n        col(\"pickup_day\")\r\n        )\r\n    .withColumn(\r\n        \"zone\",\r\n        col(\"pickup_location_name\")\r\n        )\r\n    .groupBy(\r\n        to_date(col(\"day\")).as(\"day\"),\r\n        col(\"week_day\"),\r\n        col(\"zone\")\r\n        )\r\n    .agg(round(sum(\"total_amount\"), 2).as(\"total_fare\"))\r\n    .orderBy(col(\"day\"))\r\n\r\n// Build the window function to implement on topFiveZonByTotFare\r\nval window = Window\r\n    .partitionBy(\"day\")\r\n    .orderBy(\"total_fare\")\r\n\r\n// Implement the window function to create a scoreboard of best total fare per zone per day down to the fifth rank.\r\n// Since we're using dense_rank, we will get more than five ranks on a day when total fare has the same sum on locations which are in the top ratings.\r\ntopFiveZonByTotFare\r\n    .withColumn(\"rank\", dense_rank().over(window))\r\n    .filter(col(\"rank\") <= 5)\r\n    .show(50, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:25:29+0000","progress":5,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+--------+---------------------------------+----------+----+\n|day       |week_day|zone                             |total_fare|rank|\n+----------+--------+---------------------------------+----------+----+\n|2007-12-05|4       |Lincoln Square East              |22.75     |1   |\n|2009-01-01|5       |LaGuardia Airport                |170.27    |1   |\n|2024-12-31|3       |Old Astoria                      |10.4      |1   |\n|2024-12-31|3       |Corona                           |10.4      |1   |\n|2024-12-31|3       |Central Park                     |15.7      |2   |\n|2024-12-31|3       |Clinton East                     |17.16     |3   |\n|2024-12-31|3       |Murray Hill                      |18.0      |4   |\n|2024-12-31|3       |Lincoln Square East              |20.52     |5   |\n|2025-01-01|4       |Kingsbridge Heights              |9.4       |1   |\n|2025-01-01|4       |Belmont                          |12.5      |2   |\n|2025-01-01|4       |Sunset Park East                 |17.0      |3   |\n|2025-01-01|4       |Madison                          |19.0      |4   |\n|2025-01-01|4       |East New York/Pennsylvania Avenue|20.0      |5   |\n|2025-01-02|5       |Arrochar/Fort Wadsworth          |14.89     |1   |\n|2025-01-02|5       |Ozone Park                       |27.0      |2   |\n|2025-01-02|5       |North Corona                     |27.3      |3   |\n|2025-01-02|5       |Pelham Parkway                   |30.0      |4   |\n|2025-01-02|5       |Bushwick North                   |31.0      |5   |\n|2025-01-03|6       |Charleston/Tottenville           |4.5       |1   |\n|2025-01-03|6       |Willets Point                    |4.5       |1   |\n|2025-01-03|6       |Queensboro Hill                  |7.0       |2   |\n|2025-01-03|6       |Windsor Terrace                  |13.3      |3   |\n|2025-01-03|6       |Arrochar/Fort Wadsworth          |14.89     |4   |\n|2025-01-03|6       |Marine Park/Floyd Bennett Field  |18.0      |5   |\n|2025-01-04|7       |Pelham Bay                       |6.6       |1   |\n|2025-01-04|7       |Douglaston                       |14.6      |2   |\n|2025-01-04|7       |Arrochar/Fort Wadsworth          |14.89     |3   |\n|2025-01-04|7       |Columbia Street                  |17.5      |4   |\n|2025-01-04|7       |Brooklyn Navy Yard               |18.2      |5   |\n|2025-01-05|1       |Bayside                          |5.9       |1   |\n|2025-01-05|1       |South Beach/Dongan Hills         |7.3       |2   |\n|2025-01-05|1       |Great Kills                      |13.9      |3   |\n|2025-01-05|1       |Ocean Parkway South              |19.0      |4   |\n|2025-01-05|1       |Bellerose                        |23.5      |5   |\n|2025-01-06|2       |Marble Hill                      |6.6       |1   |\n|2025-01-06|2       |Queensboro Hill                  |7.0       |2   |\n|2025-01-06|2       |Stapleton                        |14.89     |3   |\n|2025-01-06|2       |Brooklyn Navy Yard               |23.58     |4   |\n|2025-01-06|2       |Glen Oaks                        |27.0      |5   |\n|2025-01-07|3       |Pelham Bay Park                  |4.5       |1   |\n|2025-01-07|3       |Auburndale                       |6.6       |2   |\n|2025-01-07|3       |Arrochar/Fort Wadsworth          |14.89     |3   |\n|2025-01-07|3       |South Williamsburg               |21.0      |4   |\n|2025-01-07|3       |Roosevelt Island                 |30.0      |5   |\n|2025-01-08|4       |Brooklyn Navy Yard               |11.8      |1   |\n|2025-01-08|4       |Queensboro Hill                  |14.0      |2   |\n|2025-01-08|4       |Whitestone                       |27.0      |3   |\n|2025-01-08|4       |East Flushing                    |32.0      |4   |\n|2025-01-08|4       |Arrochar/Fort Wadsworth          |36.72     |5   |\n|2025-01-09|5       |Manhattan Beach                  |17.0      |1   |\n+----------+--------+---------------------------------+----------+----+\nonly showing top 50 rows\n\n\u001b[1m\u001b[34mtopFiveZonByTotFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [day: date, week_day: int ... 2 more fields]\n\u001b[1m\u001b[34mwindow\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@676ab463\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=60"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=61"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=62"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=63"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=64"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=65"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164855_1074208598","id":"paragraph_1758763610036_416097130","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:29+0000","dateFinished":"2025-09-29T19:25:42+0000","status":"FINISHED"},{"text":"val weekTripsPerBorough = df.alias(\"m\")\r\n    .join(\r\n        broadcast(dfZone.alias(\"z\")),\r\n        $\"m.PULocationID\" === $\"z.LocationID\",\r\n        \"left\"\r\n    )\r\n    .select(\r\n        $\"m.tpep_pickup_datetime\".as(\"year\"),\r\n        $\"m.tpep_pickup_datetime\".as(\"week\"),\r\n        $\"m.pickup_location_name\".as(\"zone\"),\r\n\t\t$\"z.Borough\".as(\"borough\")\r\n    )\r\n    .withColumn(\"year\", year(col(\"year\")))\r\n    .withColumn(\"week\", weekofyear(col(\"week\")))\r\n    .groupBy(col(\"borough\"), col(\"year\"), col(\"week\"))\r\n    .agg(count(\"*\").as(\"trips\"))\r\n    .orderBy(col(\"year\"), col(\"week\"), col(\"borough\"))\r\n\r\nval avgPerBoroughYear = weekTripsPerBorough\r\n    .groupBy(\"borough\", \"week\", \"year\")\r\n    .agg(round(avg(\"trips\"), 2).as(\"avg_trips_per_week\"))\r\n    .orderBy(\"year\", \"week\", \"borough\")\r\n\r\navgPerBoroughYear.show()","user":"anonymous","dateUpdated":"2025-09-29T19:25:42+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----+----+------------------+\n|      borough|week|year|avg_trips_per_week|\n+-------------+----+----+------------------+\n|    Manhattan|  49|2007|               1.0|\n|       Queens|   1|2009|               2.0|\n|    Manhattan|   1|2024|              16.0|\n|       Queens|   1|2024|               4.0|\n|        Bronx|   1|2025|             935.0|\n|     Brooklyn|   1|2025|            3946.0|\n|          EWR|   1|2025|             127.0|\n|    Manhattan|   1|2025|          347269.0|\n|          N/A|   1|2025|             295.0|\n|       Queens|   1|2025|           44740.0|\n|Staten Island|   1|2025|              15.0|\n|      Unknown|   1|2025|            1078.0|\n|        Bronx|   2|2025|            1276.0|\n|     Brooklyn|   2|2025|            5582.0|\n|          EWR|   2|2025|              61.0|\n|    Manhattan|   2|2025|          572051.0|\n|          N/A|   2|2025|             245.0|\n|       Queens|   2|2025|           58208.0|\n|Staten Island|   2|2025|              24.0|\n|      Unknown|   2|2025|            1740.0|\n+-------------+----+----+------------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mweekTripsPerBorough\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, year: int ... 2 more fields]\n\u001b[1m\u001b[34mavgPerBoroughYear\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, week: int ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=66"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=67"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=68"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=69"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164856_683733308","id":"paragraph_1758802125532_203563758","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:42+0000","dateFinished":"2025-09-29T19:25:53+0000","status":"FINISHED"},{"text":"val window = Window.partitionBy(\"borough\").orderBy(col(\"week\"), col(\"year\"))\r\n\r\nval sevenDayavgOfTripsPerBorough = avgPerBoroughYear\r\n    .withColumn(\"total_avg\", rank().over(window))\r\n    .orderBy(col(\"borough\"), col(\"week\"))","user":"anonymous","dateUpdated":"2025-09-29T19:25:53+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mwindow\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@74eb55e2\n\u001b[1m\u001b[34msevenDayavgOfTripsPerBorough\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, week: int ... 3 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164857_930287321","id":"paragraph_1758820998445_109533402","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:53+0000","dateFinished":"2025-09-29T19:25:54+0000","status":"FINISHED"},{"text":"sevenDayavgOfTripsPerBorough.show()","user":"anonymous","dateUpdated":"2025-09-29T19:25:54+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+----+------------------+---------+\n|borough|week|year|avg_trips_per_week|total_avg|\n+-------+----+----+------------------+---------+\n|  Bronx|   1|2025|             935.0|        1|\n|  Bronx|   2|2025|            1276.0|        2|\n|  Bronx|   3|2025|            1587.0|        3|\n|  Bronx|   4|2025|            1445.0|        4|\n|  Bronx|   5|2025|            1676.0|        5|\n|  Bronx|   6|2025|            1519.0|        6|\n|  Bronx|   7|2025|            1518.0|        7|\n|  Bronx|   8|2025|            1542.0|        8|\n|  Bronx|   9|2025|            1770.0|        9|\n|  Bronx|  10|2025|            1675.0|       10|\n|  Bronx|  11|2025|            1652.0|       11|\n|  Bronx|  12|2025|            1808.0|       12|\n|  Bronx|  13|2025|            1754.0|       13|\n|  Bronx|  14|2025|            1813.0|       14|\n|  Bronx|  15|2025|            1776.0|       15|\n|  Bronx|  16|2025|            1747.0|       16|\n|  Bronx|  17|2025|            1964.0|       17|\n|  Bronx|  18|2025|            1921.0|       18|\n|  Bronx|  19|2025|            1782.0|       19|\n|  Bronx|  20|2025|            1781.0|       20|\n+-------+----+----+------------------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=70"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=71"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=72"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=73"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=74"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=75"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=76"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164858_1110206083","id":"paragraph_1758811460474_63998728","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:25:54+0000","dateFinished":"2025-09-29T19:26:03+0000","status":"FINISHED"},{"text":"// 1) Join trips → zones to get borough, derive calendar day (localize if needed)\r\nval tripsPerDay =\r\n  df.alias(\"t\")\r\n    .join(broadcast(dfZone.alias(\"z\")), $\"t.PULocationID\" === $\"z.LocationID\", \"left\")\r\n    .withColumn(\"pickup_ts\", col(\"t.tpep_pickup_datetime\").cast(\"timestamp\"))\r\n    .withColumn(\"day\", to_date($\"pickup_ts\"))\r\n    .groupBy($\"z.Borough\".as(\"borough\"), $\"day\")\r\n    .agg(count(lit(1)).as(\"daily_trips\"))\r\n\r\n// 2) Fill missing days with zero per borough (so the average isn’t biased)\r\nval dayBounds =\r\n  tripsPerDay.groupBy(\"borough\")\r\n    .agg(min($\"day\").as(\"min_day\"), max($\"day\").as(\"max_day\"))\r\n\r\nval calendar =\r\n  dayBounds.select(\r\n    $\"borough\",\r\n    explode(sequence($\"min_day\", $\"max_day\", expr(\"interval 1 day\"))).as(\"day\")\r\n  )\r\n\r\nval dailyFilled =\r\n  calendar.join(tripsPerDay, Seq(\"borough\",\"day\"), \"left\")\r\n          .select($\"borough\", $\"day\", coalesce($\"daily_trips\", lit(0L)).as(\"daily_trips\"))\r\n\r\n// 3) 7-day trailing moving average (current day + previous 6)\r\nval w = Window.partitionBy(\"borough\").orderBy($\"day\").rowsBetween(-6, 0)\r\n\r\nval tripsWithMA7 =\r\n  dailyFilled\r\n    .withColumn(\"trips_ma7\", round(avg($\"daily_trips\").over(w), 2))\r\n    .orderBy($\"borough\", $\"day\")\r\n\r\ntripsWithMA7.show(50, truncate = false)","user":"anonymous","dateUpdated":"2025-09-29T19:26:03+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----------+-----------+---------+\n|borough|day       |daily_trips|trips_ma7|\n+-------+----------+-----------+---------+\n|Bronx  |2025-01-01|137        |137.0    |\n|Bronx  |2025-01-02|240        |188.5    |\n|Bronx  |2025-01-03|246        |207.67   |\n|Bronx  |2025-01-04|167        |197.5    |\n|Bronx  |2025-01-05|145        |187.0    |\n|Bronx  |2025-01-06|175        |185.0    |\n|Bronx  |2025-01-07|205        |187.86   |\n|Bronx  |2025-01-08|179        |193.86   |\n|Bronx  |2025-01-09|191        |186.86   |\n|Bronx  |2025-01-10|207        |181.29   |\n|Bronx  |2025-01-11|167        |181.29   |\n|Bronx  |2025-01-12|152        |182.29   |\n|Bronx  |2025-01-13|236        |191.0    |\n|Bronx  |2025-01-14|240        |196.0    |\n|Bronx  |2025-01-15|276        |209.86   |\n|Bronx  |2025-01-16|268        |220.86   |\n|Bronx  |2025-01-17|220        |222.71   |\n|Bronx  |2025-01-18|197        |227.0    |\n|Bronx  |2025-01-19|150        |226.71   |\n|Bronx  |2025-01-20|84         |205.0    |\n|Bronx  |2025-01-21|240        |205.0    |\n|Bronx  |2025-01-22|223        |197.43   |\n|Bronx  |2025-01-23|299        |201.86   |\n|Bronx  |2025-01-24|249        |206.0    |\n|Bronx  |2025-01-25|180        |203.57   |\n|Bronx  |2025-01-26|170        |206.43   |\n|Bronx  |2025-01-27|281        |234.57   |\n|Bronx  |2025-01-28|267        |238.43   |\n|Bronx  |2025-01-29|253        |242.71   |\n|Bronx  |2025-01-30|245        |235.0    |\n|Bronx  |2025-01-31|274        |238.57   |\n|Bronx  |2025-02-01|176        |238.0    |\n|Bronx  |2025-02-02|180        |239.43   |\n|Bronx  |2025-02-03|251        |235.14   |\n|Bronx  |2025-02-04|234        |230.43   |\n|Bronx  |2025-02-05|267        |232.43   |\n|Bronx  |2025-02-06|206        |226.86   |\n|Bronx  |2025-02-07|290        |229.14   |\n|Bronx  |2025-02-08|158        |226.57   |\n|Bronx  |2025-02-09|113        |217.0    |\n|Bronx  |2025-02-10|254        |217.43   |\n|Bronx  |2025-02-11|237        |217.86   |\n|Bronx  |2025-02-12|234        |213.14   |\n|Bronx  |2025-02-13|263        |221.29   |\n|Bronx  |2025-02-14|235        |213.43   |\n|Bronx  |2025-02-15|177        |216.14   |\n|Bronx  |2025-02-16|118        |216.86   |\n|Bronx  |2025-02-17|106        |195.71   |\n|Bronx  |2025-02-18|255        |198.29   |\n|Bronx  |2025-02-19|259        |201.86   |\n+-------+----------+-----------+---------+\nonly showing top 50 rows\n\n\u001b[1m\u001b[34mtripsPerDay\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date ... 1 more field]\n\u001b[1m\u001b[34mdayBounds\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, min_day: date ... 1 more field]\n\u001b[1m\u001b[34mcalendar\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date]\n\u001b[1m\u001b[34mdailyFilled\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date ... 1 more field]\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@6ffbe301\n\u001b[1m\u001b[34mtripsWithMA7\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, day: date ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=77"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=78"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=79"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=80"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=81"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=82"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=83"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=84"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=85"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164858_2024775971","id":"paragraph_1758823049686_954137358","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:26:03+0000","dateFinished":"2025-09-29T19:26:22+0000","status":"FINISHED"},{"text":"import org.apache.spark.sql.{DataFrame, SparkSession}\r\nimport org.apache.spark.sql.functions._\r\nimport org.apache.spark.storage.StorageLevel\r\n\r\ndef timed[T](label: String)(thunk: => T): T = {\r\n  val t0 = System.nanoTime()\r\n  val out = thunk\r\n  val ms = (System.nanoTime() - t0) / 1e6\r\n  println(f\"⏱  $label took $ms%.1f ms\")\r\n  out\r\n}\r\n\r\n// Materialize and time a DF\r\ndef bench(df: DataFrame, label: String = \"action\"): Long =\r\n  timed(label){ df.count() } // count() is a cheap “force” for joins\r\n\r\ndef printPlan(df: DataFrame, label: String): Unit = {\r\n  println(s\"\\n==== $label ====\")\r\n  df.explain(\"formatted\")   // look for BroadcastHashJoin vs SortMergeJoin\r\n}\r\n","user":"anonymous","dateUpdated":"2025-09-29T19:26:22+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mtimed\u001b[0m: \u001b[1m\u001b[32m[T](label: String)(thunk: => T)T\u001b[0m\n\u001b[1m\u001b[34mbench\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, label: String)Long\u001b[0m\n\u001b[1m\u001b[34mprintPlan\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, label: String)Unit\u001b[0m\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164858_1009146804","id":"paragraph_1758824348262_211190706","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:26:22+0000","dateFinished":"2025-09-29T19:26:23+0000","status":"FINISHED"},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=94"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1759174300059_1030164345","id":"paragraph_1759174300059_1030164345","dateCreated":"2025-09-29T19:31:40+0000","status":"FINISHED","text":"// Import of TCL and MapZone data for preformance tuning:\r\n\r\n// Define Schema for TCL.\r\nval refPath1 = \"/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\"\r\nval refSchema1 = spark.read.parquet(refPath1).schema\r\n\r\n// Define path for datafiles.\r\n\r\nval base1 = (\"/sparkio/TLC/trips/2025/yellow*.parquet\")\r\n\r\n// Load data into a DataFrame.\r\nval dfTuning = spark.read\r\n\t.option(\"recursiveFileLookup\", true)\r\n\t.schema(refSchema1)\r\n\t.parquet(base1)\r\n\r\n//File location.\r\nval base2 = (\"/sparkio/TLC/mapZones/taxi_zone_lookup.csv\")\r\n\r\n// Custom schema (LocationID got defined as a string without).\r\nval zoneSchema = StructType(Array(\r\n    StructField(\"LocationID\", IntegerType, true),\r\n    StructField(\"Borough\", StringType, true),\r\n    StructField(\"Zone\", StringType, true),\r\n    StructField(\"service_zone\", StringType, true)\r\n))\r\n\r\n// Import of data to df.\r\nval dfZoneTuning = spark.read\r\n\t.option(\"header\", \"true\")\r\n    .schema(zoneSchema)\r\n    .csv(base2)\r\n","focus":false,"dateUpdated":"2025-09-29T19:37:49+0000","dateFinished":"2025-09-29T19:37:50+0000","dateStarted":"2025-09-29T19:37:49+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mrefPath1\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\n\u001b[1m\u001b[34mrefSchema1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(VendorID,IntegerType,true),StructField(tpep_pickup_datetime,TimestampNTZType,true),StructField(tpep_dropoff_datetime,TimestampNTZType,true),StructField(passenger_count,LongType,true),StructField(trip_distance,DoubleType,true),StructField(RatecodeID,LongType,true),StructField(store_and_fwd_flag,StringType,true),StructField(PULocationID,IntegerType,true),StructField(DOLocationID,IntegerType,true),StructField(payment_type,LongType,true),StructField(fare_amount,DoubleType,true),StructField(extra,DoubleType,true),StructField(mta_tax,DoubleType,true),StructField(tip_amount,DoubleType,true),Stru...\n"}]}},{"text":"// Turn off auto-broadcast\r\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n\r\nval joinNoBroadcast =\r\n  dfTuning\r\n    .join(dfZoneTuning, dfTuning(\"PULocationID\") === dfZoneTuning(\"LocationID\"), \"left\")\r\n    .select(dfTuning(\"*\"), dfZoneTuning(\"Borough\").as(\"PU_Borough\"), dfZoneTuning(\"Zone\").as(\"PU_Zone\"))\r\n\r\nprintPlan(joinNoBroadcast, \"NO BROADCAST PLAN\")\r\nbench(joinNoBroadcast, \"no-broadcast join materialize\")\r\n","user":"anonymous","dateUpdated":"2025-09-29T19:39:31+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n==== NO BROADCAST PLAN ====\n== Physical Plan ==\nAdaptiveSparkPlan (10)\n+- Project (9)\n   +- SortMergeJoin LeftOuter (8)\n      :- Sort (3)\n      :  +- Exchange (2)\n      :     +- Scan parquet  (1)\n      +- Sort (7)\n         +- Exchange (6)\n            +- Filter (5)\n               +- Scan csv  (4)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Exchange\nInput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nArguments: hashpartitioning(PULocationID#3478, 200), ENSURE_REQUIREMENTS, [plan_id=5045]\n\n(3) Sort\nInput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nArguments: [PULocationID#3478 ASC NULLS FIRST], false, 0\n\n(4) Scan csv \nOutput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string>\n\n(5) Filter\nInput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nCondition : isnotnull(LocationID#3511)\n\n(6) Exchange\nInput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nArguments: hashpartitioning(LocationID#3511, 200), ENSURE_REQUIREMENTS, [plan_id=5046]\n\n(7) Sort\nInput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nArguments: [LocationID#3511 ASC NULLS FIRST], false, 0\n\n(8) SortMergeJoin\nLeft keys [1]: [PULocationID#3478]\nRight keys [1]: [LocationID#3511]\nJoin type: LeftOuter\nJoin condition: None\n\n(9) Project\nOutput [22]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, Borough#3512 AS PU_Borough#3669, Zone#3513 AS PU_Zone#3670]\nInput [23]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, LocationID#3511, Borough#3512, Zone#3513]\n\n(10) AdaptiveSparkPlan\nOutput [22]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, PU_Borough#3669, PU_Zone#3670]\nArguments: isFinalPlan=false\n\n\n⏱  no-broadcast join materialize took 6689.3 ms\n\u001b[1m\u001b[34mjoinNoBroadcast\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 20 more fields]\n\u001b[1m\u001b[34mres46\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=98"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=99"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=100"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=101"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164859_433130330","id":"paragraph_1758825664135_1258282004","dateCreated":"2025-09-26T20:22:44+0000","dateStarted":"2025-09-29T19:39:31+0000","dateFinished":"2025-09-29T19:39:38+0000","status":"FINISHED","focus":false},{"text":"import org.apache.spark.sql.functions.broadcast\r\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", 100*1024*1024) // 100MB\r\n\r\nval joinBroadcast =\r\n  dfTuning\r\n    .join(broadcast(dfZoneTuning), dfTuning(\"PULocationID\") === dfZoneTuning(\"LocationID\"), \"left\")\r\n    .select(dfTuning(\"*\"), dfZoneTuning(\"Borough\").as(\"PU_Borough\"), dfZoneTuning(\"Zone\").as(\"PU_Zone\"))\r\n\r\nprintPlan(joinBroadcast, \"BROADCAST PLAN\")\r\nbench(joinBroadcast, \"broadcast join materialize\")\r\n","user":"anonymous","dateUpdated":"2025-09-29T20:00:57+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n==== BROADCAST PLAN ====\n== Physical Plan ==\nAdaptiveSparkPlan (7)\n+- Project (6)\n   +- BroadcastHashJoin LeftOuter BuildRight (5)\n      :- Scan parquet  (1)\n      +- BroadcastExchange (4)\n         +- Filter (3)\n            +- Scan csv  (2)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Scan csv \nOutput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string>\n\n(3) Filter\nInput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nCondition : isnotnull(LocationID#3511)\n\n(4) BroadcastExchange\nInput [3]: [LocationID#3511, Borough#3512, Zone#3513]\nArguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5406]\n\n(5) BroadcastHashJoin\nLeft keys [1]: [PULocationID#3478]\nRight keys [1]: [LocationID#3511]\nJoin type: LeftOuter\nJoin condition: None\n\n(6) Project\nOutput [22]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, Borough#3512 AS PU_Borough#3869, Zone#3513 AS PU_Zone#3870]\nInput [23]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, LocationID#3511, Borough#3512, Zone#3513]\n\n(7) AdaptiveSparkPlan\nOutput [22]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, PU_Borough#3869, PU_Zone#3870]\nArguments: isFinalPlan=false\n\n\n⏱  broadcast join materialize took 624.5 ms\nimport org.apache.spark.sql.functions.broadcast\n\u001b[1m\u001b[34mjoinBroadcast\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 20 more fields]\n\u001b[1m\u001b[34mres48\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=105"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=106"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=107"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164859_878567797","id":"paragraph_1758825760848_976279029","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T20:00:58+0000","dateStarted":"2025-09-29T20:00:57+0000"},{"text":"val topPulocs =\r\n  dfTuning.groupBy($\"PULocationID\").count().orderBy(desc(\"count\"))\r\ntopPulocs.show(10, truncate=false)","user":"anonymous","dateUpdated":"2025-09-29T20:43:43+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+-------+\n|PULocationID|count  |\n+------------+-------+\n|161         |1237444|\n|237         |1213320|\n|132         |1161803|\n|236         |1080997|\n|230         |904472 |\n|186         |883575 |\n|162         |873365 |\n|142         |801744 |\n|234         |752946 |\n|170         |751846 |\n+------------+-------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopPulocs\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [PULocationID: int, count: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=112"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=113"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164860_2006153779","id":"paragraph_1758827995246_1774524570","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T20:43:45+0000","dateStarted":"2025-09-29T20:43:43+0000"},{"text":"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\nval heavyKeys = Seq(161, 237, 132, 236)\r\n","user":"anonymous","dateUpdated":"2025-09-29T21:01:19+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mheavyKeys\u001b[0m: \u001b[1m\u001b[32mSeq[Int]\u001b[0m = List(161, 237, 132, 236)\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164861_829973365","id":"paragraph_1758828048890_308814110","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T21:01:20+0000","dateStarted":"2025-09-29T21:01:19+0000"},{"text":"val joinedSkew =\r\n  dfTuning\r\n    .join(dfZoneTuning, $\"PULocationID\" === $\"LocationID\") // no broadcast, skewed key\r\n    .select($\"trip_distance\", $\"PULocationID\", $\"Zone\")\r\n\r\nprintPlan(joinedSkew, \"SKEWED JOIN (unsalted)\")\r\nbench(joinedSkew, \"unsalted skewed join\")\r\n","user":"anonymous","dateUpdated":"2025-09-29T21:01:22+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n==== SKEWED JOIN (unsalted) ====\n== Physical Plan ==\nAdaptiveSparkPlan (11)\n+- Project (10)\n   +- SortMergeJoin Inner (9)\n      :- Sort (4)\n      :  +- Exchange (3)\n      :     +- Filter (2)\n      :        +- Scan parquet  (1)\n      +- Sort (8)\n         +- Exchange (7)\n            +- Filter (6)\n               +- Scan csv  (5)\n\n\n(1) Scan parquet \nOutput [2]: [trip_distance#3475, PULocationID#3478]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nPushedFilters: [IsNotNull(PULocationID)]\nReadSchema: struct<trip_distance:double,PULocationID:int>\n\n(2) Filter\nInput [2]: [trip_distance#3475, PULocationID#3478]\nCondition : isnotnull(PULocationID#3478)\n\n(3) Exchange\nInput [2]: [trip_distance#3475, PULocationID#3478]\nArguments: hashpartitioning(PULocationID#3478, 200), ENSURE_REQUIREMENTS, [plan_id=5702]\n\n(4) Sort\nInput [2]: [trip_distance#3475, PULocationID#3478]\nArguments: [PULocationID#3478 ASC NULLS FIRST], false, 0\n\n(5) Scan csv \nOutput [2]: [LocationID#3511, Zone#3513]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Zone:string>\n\n(6) Filter\nInput [2]: [LocationID#3511, Zone#3513]\nCondition : isnotnull(LocationID#3511)\n\n(7) Exchange\nInput [2]: [LocationID#3511, Zone#3513]\nArguments: hashpartitioning(LocationID#3511, 200), ENSURE_REQUIREMENTS, [plan_id=5703]\n\n(8) Sort\nInput [2]: [LocationID#3511, Zone#3513]\nArguments: [LocationID#3511 ASC NULLS FIRST], false, 0\n\n(9) SortMergeJoin\nLeft keys [1]: [PULocationID#3478]\nRight keys [1]: [LocationID#3511]\nJoin type: Inner\nJoin condition: None\n\n(10) Project\nOutput [3]: [trip_distance#3475, PULocationID#3478, Zone#3513]\nInput [4]: [trip_distance#3475, PULocationID#3478, LocationID#3511, Zone#3513]\n\n(11) AdaptiveSparkPlan\nOutput [3]: [trip_distance#3475, PULocationID#3478, Zone#3513]\nArguments: isFinalPlan=false\n\n\n⏱  unsalted skewed join took 10395.6 ms\n\u001b[1m\u001b[34mjoinedSkew\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [trip_distance: double, PULocationID: int ... 1 more field]\n\u001b[1m\u001b[34mres54\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=114"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=115"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=116"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=117"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164861_924253720","id":"paragraph_1758828082751_1439452917","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T21:01:33+0000","dateStarted":"2025-09-29T21:01:22+0000"},{"text":"val saltBuckets = 16\r\n\r\n// Left (big) side: assign salt for heavy keys; keep 0 for others\r\nval dfSalted =\r\n  dfTuning.withColumn(\r\n    \"salt\",\r\n    when(col(\"PULocationID\").isin(heavyKeys:_*),\r\n         pmod(hash(col(\"tpep_pickup_datetime\")), lit(saltBuckets)) // deterministic spread\r\n    ).otherwise(lit(0))\r\n  )\r\n\r\n// Right (small) side: replicate heavy keys across all salt buckets; keep 0 for others\r\nval dfZoneSalted =\r\n  dfZoneTuning\r\n    .withColumn(\r\n      \"salt_array\",\r\n      when(col(\"LocationID\").isin(heavyKeys:_*),\r\n           sequence(lit(0), lit(saltBuckets - 1)) // 0..N-1\r\n      ).otherwise(array(lit(0)))\r\n    )\r\n    .withColumn(\"salt\", explode(col(\"salt_array\")))\r\n    .drop(\"salt_array\")\r\n\r\nval joinedSalted =\r\n  dfSalted\r\n    .join(dfZoneSalted,\r\n          dfSalted(\"PULocationID\") === dfZoneSalted(\"LocationID\") &&\r\n          dfSalted(\"salt\") === dfZoneSalted(\"salt\"))\r\n    .drop(dfZoneSalted(\"salt\"))\r\n\r\nprintPlan(joinedSalted, \"SKEWED JOIN (salted)\")\r\nbench(joinedSalted, \"salted skewed join\")\r\n","user":"anonymous","dateUpdated":"2025-09-29T21:01:44+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n==== SKEWED JOIN (salted) ====\n== Physical Plan ==\nAdaptiveSparkPlan (14)\n+- Project (13)\n   +- SortMergeJoin Inner (12)\n      :- Sort (5)\n      :  +- Exchange (4)\n      :     +- Project (3)\n      :        +- Filter (2)\n      :           +- Scan parquet  (1)\n      +- Sort (11)\n         +- Exchange (10)\n            +- Generate (9)\n               +- Project (8)\n                  +- Filter (7)\n                     +- Scan csv  (6)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nPushedFilters: [IsNotNull(PULocationID)]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Filter\nInput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\nCondition : (isnotnull(PULocationID#3478) AND CASE WHEN PULocationID#3478 IN (161,237,132,236) THEN isnotnull(pmod(hash(tpep_pickup_datetime#3472, 42), 16)) ELSE true END)\n\n(3) Project\nOutput [21]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, CASE WHEN PULocationID#3478 IN (161,237,132,236) THEN pmod(hash(tpep_pickup_datetime#3472, 42), 16) ELSE 0 END AS salt#4086]\nInput [20]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490]\n\n(4) Exchange\nInput [21]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, salt#4086]\nArguments: hashpartitioning(PULocationID#3478, salt#4086, 200), ENSURE_REQUIREMENTS, [plan_id=5939]\n\n(5) Sort\nInput [21]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, salt#4086]\nArguments: [PULocationID#3478 ASC NULLS FIRST, salt#4086 ASC NULLS FIRST], false, 0\n\n(6) Scan csv \nOutput [4]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string,service_zone:string>\n\n(7) Filter\nInput [4]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514]\nCondition : ((size(CASE WHEN LocationID#3511 IN (161,237,132,236) THEN org.apache.spark.sql.catalyst.expressions.UnsafeArrayData@f1dd012b ELSE [0] END, true) > 0) AND isnotnull(LocationID#3511))\n\n(8) Project\nOutput [5]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514, CASE WHEN LocationID#3511 IN (161,237,132,236) THEN org.apache.spark.sql.catalyst.expressions.UnsafeArrayData@f1dd012b ELSE [0] END AS salt_array#4108]\nInput [4]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514]\n\n(9) Generate\nInput [5]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514, salt_array#4108]\nArguments: explode(salt_array#4108), [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514], false, [salt#4115]\n\n(10) Exchange\nInput [5]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514, salt#4115]\nArguments: hashpartitioning(LocationID#3511, salt#4115, 200), ENSURE_REQUIREMENTS, [plan_id=5940]\n\n(11) Sort\nInput [5]: [LocationID#3511, Borough#3512, Zone#3513, service_zone#3514, salt#4115]\nArguments: [LocationID#3511 ASC NULLS FIRST, salt#4115 ASC NULLS FIRST], false, 0\n\n(12) SortMergeJoin\nLeft keys [2]: [PULocationID#3478, salt#4086]\nRight keys [2]: [LocationID#3511, salt#4115]\nJoin type: Inner\nJoin condition: None\n\n(13) Project\nOutput [25]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, salt#4086, LocationID#3511, Borough#3512, Zone#3513, service_zone#3514]\nInput [26]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, salt#4086, LocationID#3511, Borough#3512, Zone#3513, service_zone#3514, salt#4115]\n\n(14) AdaptiveSparkPlan\nOutput [25]: [VendorID#3471, tpep_pickup_datetime#3472, tpep_dropoff_datetime#3473, passenger_count#3474L, trip_distance#3475, RatecodeID#3476L, store_and_fwd_flag#3477, PULocationID#3478, DOLocationID#3479, payment_type#3480L, fare_amount#3481, extra#3482, mta_tax#3483, tip_amount#3484, tolls_amount#3485, improvement_surcharge#3486, total_amount#3487, congestion_surcharge#3488, Airport_fee#3489, cbd_congestion_fee#3490, salt#4086, LocationID#3511, Borough#3512, Zone#3513, service_zone#3514]\nArguments: isFinalPlan=false\n\n\n⏱  salted skewed join took 9714.4 ms\n\u001b[1m\u001b[34msaltBuckets\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 16\n\u001b[1m\u001b[34mdfSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 19 more fields]\n\u001b[1m\u001b[34mdfZoneSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [LocationID: int, Borough: string ... 3 more fields]\n\u001b[1m\u001b[34mjoinedSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n\u001b[1m\u001b[34mres55\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=118"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=119"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=120"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=121"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164862_1898538865","id":"paragraph_1758828126415_1290153525","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T21:01:58+0000","dateStarted":"2025-09-29T21:01:45+0000"},{"text":"val base = dfTuning.select(\"PULocationID\", \"tpep_pickup_datetime\", \"trip_distance\")\r\nbase.persist(StorageLevel.MEMORY_AND_DISK)\r\nbase.count() // materialize\r\n\r\nval run1 = bench(base.filter($\"trip_distance\" > 3), \"cached path 1\")\r\nval run2 = bench(base.filter($\"trip_distance\" <= 3), \"cached path 2\")\r\n\r\nbase.unpersist(true)\r\n","user":"anonymous","dateUpdated":"2025-09-29T21:19:11+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"⏱  cached path 1 took 329.4 ms\n⏱  cached path 2 took 246.6 ms\n\u001b[1m\u001b[34mbase\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [PULocationID: int, tpep_pickup_datetime: timestamp_ntz ... 1 more field]\n\u001b[1m\u001b[34mrun1\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 8312574\n\u001b[1m\u001b[34mrun2\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 19669773\n\u001b[1m\u001b[34mres58\u001b[0m: \u001b[1m\u001b[32mbase.type\u001b[0m = [PULocationID: int, tpep_pickup_datetime: timestamp_ntz ... 1 more field]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=129"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=130"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=131"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=132"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=133"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=134"},{"jobUrl":"http://3f0825482a0c:4040/jobs/job?id=135"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164864_1019261320","id":"paragraph_1758828184538_1818083274","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T21:19:18+0000","dateStarted":"2025-09-29T21:19:11+0000"},{"text":"// Range partitioning can help for ordered keys (e.g., time)\r\nval byWeek = dfTuning.withColumn(\"week\", weekofyear($\"tpep_pickup_datetime\"))\r\nval ranged  = byWeek.repartitionByRange(200, $\"week\")\r\n","user":"anonymous","dateUpdated":"2025-09-29T21:02:52+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mbyWeek\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 19 more fields]\n\u001b[1m\u001b[34mranged\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 19 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164864_1083044776","id":"paragraph_1758828323568_1176051925","dateCreated":"2025-09-26T20:22:44+0000","status":"FINISHED","focus":false,"dateFinished":"2025-09-29T21:02:53+0000","dateStarted":"2025-09-29T21:02:52+0000"},{"text":"","user":"anonymous","dateUpdated":"2025-09-26T20:22:44+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1758918164865_1247824430","id":"paragraph_1758828367280_1611001686","dateCreated":"2025-09-26T20:22:44+0000","status":"READY"}],"name":"TLC_yellow2","id":"2M65TTYUX","defaultInterpreterGroup":"spark","version":"0.12.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/TLC_yellow2"}