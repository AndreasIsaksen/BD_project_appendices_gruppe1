{"paragraphs":[{"text":"%spark\r\n// Ref. '2.2.1 Import av Pakker' in raport.\r\n// Import packages.\r\nprint(\"Ref. '2.2.1 Import av Pakker' in raport.\\n\")\r\nprint(\"Import necessary packages.\\n\")\r\nimport spark.implicits._\r\nimport org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.expressions._\r\nimport org.apache.spark.sql.functions._","user":"anonymous","dateUpdated":"2025-10-31T14:33:11+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.1 Import av Pakker' in raport.\nImport necessary packages.\nimport spark.implicits._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.functions._\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764563_1286056368","id":"paragraph_1761566810837_1549834679","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","focus":false,"dateFinished":"2025-10-31T14:33:13+0000","dateStarted":"2025-10-31T14:33:11+0000"},{"text":"%spark\n// Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\n// Import of TCL data:\n\n// Define Schema for TCL.\nval refPath = \"/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\"\nval refSchema = spark.read.parquet(refPath).schema\n\n// Define path for datafiles.\n\nval base = (\"/sparkio/TLC/trips/2025/yellow*.parquet\")\n\n// Load data into a DataFrame.\nval df = spark.read\n\t.option(\"recursiveFileLookup\", true)\n\t.schema(refSchema)\n\t.parquet(base)\n\n// Validate results.\nprint(\"Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\\n\")\nprint(\"Import of TCL yellow 2025 data.\\n\")\nprint(\"Yellow TLC df in its original state:\\n\")\ndf.show(3, truncate = false)\n\n","user":"anonymous","dateUpdated":"2025-10-31T14:33:13+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\nImport of TCL yellow 2025 data.\nYellow TLC df in its original state:\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|1       |2025-05-01 00:07:06 |2025-05-01 00:24:15  |1              |3.7          |1         |N                 |140         |202         |1           |18.4       |4.25 |0.5    |4.85      |0.0         |1.0                  |29.0        |2.5                 |0.0        |0.75              |\n|2       |2025-05-01 00:07:44 |2025-05-01 00:14:27  |1              |1.03         |1         |N                 |234         |161         |1           |8.6        |1.0  |0.5    |4.3       |0.0         |1.0                  |18.65       |2.5                 |0.0        |0.75              |\n|2       |2025-05-01 00:15:56 |2025-05-01 00:23:53  |1              |1.57         |1         |N                 |161         |234         |2           |10.0       |1.0  |0.5    |0.0       |0.0         |1.0                  |15.75       |2.5                 |0.0        |0.75              |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mrefPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\n\u001b[1m\u001b[34mrefSchema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(VendorID,IntegerType,true),StructField(tpep_pickup_datetime,TimestampNTZType,true),StructField(tpep_dropoff_datetime,TimestampNTZType,true),StructField(passenger_count,LongType,true),StructField(trip_distance,DoubleType,true),StructField(RatecodeID,LongType,true),StructField(store_and_fwd_flag,StringType,true),StructField(PULocationID,IntegerType,true),StructField(DOLocationID,IntegerType,true),StructField(payment_type,LongType,true),StructField(fare_amount,DoubleType,true),StructField(extra,DoubleType,true),StructField(mta_tax,DoubleType,true),StructField(tip_amount,DoubleType,true),Struct...\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=137"},{"jobUrl":"http://localhost:4040/jobs/job?id=138"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764568_535255919","id":"paragraph_1761566820270_1415549698","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:26+0000","dateStarted":"2025-10-31T14:33:13+0000"},{"text":"%spark\n// Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\nprint(\"Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\\nOverview of column dataTypes in original TLC df.\\n\")\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:33:26+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2 Lesing og Inspeksjon av Data' in raport.\nOverview of column dataTypes in original TLC df.\nroot\n |-- VendorID: integer (nullable = true)\n |-- tpep_pickup_datetime: timestamp_ntz (nullable = true)\n |-- tpep_dropoff_datetime: timestamp_ntz (nullable = true)\n |-- passenger_count: long (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: long (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: long (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764569_1688699159","id":"paragraph_1761758226281_2026913602","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:27+0000","dateStarted":"2025-10-31T14:33:26+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"VendorID\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:27+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.Controll row content in column evaluated for type casting.\n+--------+\n|VendorID|\n+--------+\n|       1|\n|       6|\n|       7|\n|       2|\n+--------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=139"},{"jobUrl":"http://localhost:4040/jobs/job?id=140"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764569_1068906348","id":"paragraph_1761767994999_1189234850","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:31+0000","dateStarted":"2025-10-31T14:33:27+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"passenger_count\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:31+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+---------------+\n|passenger_count|\n+---------------+\n|              0|\n|              7|\n|              6|\n|              9|\n|              5|\n|              1|\n|              3|\n|              8|\n|              2|\n|              4|\n|           NULL|\n+---------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=141"},{"jobUrl":"http://localhost:4040/jobs/job?id=142"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764570_967343721","id":"paragraph_1761768586532_2007377276","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:34+0000","dateStarted":"2025-10-31T14:33:31+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"RatecodeID\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:34+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+----------+\n|RatecodeID|\n+----------+\n|         6|\n|         5|\n|         1|\n|         3|\n|         2|\n|         4|\n|        99|\n|      NULL|\n+----------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=143"},{"jobUrl":"http://localhost:4040/jobs/job?id=144"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764570_967712025","id":"paragraph_1761768639197_1837676398","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:37+0000","dateStarted":"2025-10-31T14:33:34+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"store_and_fwd_flag\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:37+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+------------------+\n|store_and_fwd_flag|\n+------------------+\n|                 Y|\n|                 N|\n|              NULL|\n+------------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=145"},{"jobUrl":"http://localhost:4040/jobs/job?id=146"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764571_426773812","id":"paragraph_1761744166328_1887479655","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:41+0000","dateStarted":"2025-10-31T14:33:37+0000"},{"text":"%spark\n// Ref. \"2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting\" in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"payment_type\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:42+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+------------+\n|payment_type|\n+------------+\n|           0|\n|           1|\n|           3|\n|           2|\n|           4|\n|           5|\n+------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=147"},{"jobUrl":"http://localhost:4040/jobs/job?id=148"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764572_1155673903","id":"paragraph_1761747069688_1765645738","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:43+0000","dateStarted":"2025-10-31T14:33:42+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"improvement_surcharge\").distinct.show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:43+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+---------------------+\n|improvement_surcharge|\n+---------------------+\n|                  0.0|\n|                 -1.0|\n|                  0.3|\n|                  1.0|\n+---------------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=149"},{"jobUrl":"http://localhost:4040/jobs/job?id=150"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764574_3261196","id":"paragraph_1761747292148_289464607","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:46+0000","dateStarted":"2025-10-31T14:33:43+0000"},{"text":"%spark\n// Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\n// Controll row content in column evaluated for type casting.\nprint(\"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\\n\")\nprint(\"Controll row content in column evaluated for type casting.\\n\")\ndf.select(\"cbd_congestion_fee\").distinct().show()","user":"anonymous","dateUpdated":"2025-10-31T14:33:46+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.2.1 Kontroll av Innhold på Utvalgte Kolonner før Type Casting' in raport.\nControll row content in column evaluated for type casting.\n+------------------+\n|cbd_congestion_fee|\n+------------------+\n|               0.0|\n|              1.25|\n|             -0.75|\n|              0.75|\n|               1.5|\n|              0.25|\n+------------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=151"},{"jobUrl":"http://localhost:4040/jobs/job?id=152"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764575_1676190068","id":"paragraph_1761747416942_1522992895","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:48+0000","dateStarted":"2025-10-31T14:33:46+0000"},{"text":"%spark\n// Ref. '2.2.3.1 Type Casting' in raport.\n// Cast the appropriate dataTypes to the rows.\nval typeFix = df\n    .withColumn(\"VendorID\", col(\"VendorID\").cast(\"byte\"))\n    .withColumn(\"tpep_pickup_datetime\", col(\"tpep_pickup_datetime\").cast(\"timestamp\"))\n    .withColumn(\"tpep_dropoff_datetime\", col(\"tpep_dropoff_datetime\").cast(\"timestamp\"))\n    .withColumn(\"passenger_count\", col(\"passenger_count\").cast(\"byte\"))\n    .withColumn(\"RatecodeID\", col(\"RatecodeID\").cast(\"byte\"))\n    .withColumn(\"store_and_fwd_flag\", (col(\"store_and_fwd_flag\") === lit(\"Y\")).cast(\"boolean\"))\n    .withColumn(\"payment_type\", col(\"payment_type\").cast(\"byte\"))\n\n// Controll that df look right after casting.\nprint(\"Ref. '2.2.3.1 Type Casting' in raport.\\n\")\nprint(\"Create a temporary df used for type casting the appropriate datatype to columns.\\nPrint topp rows on temporary df to validate the content.\\n\")\ntypeFix.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:33:48+0000","progress":0,"config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.3.1 Type Casting' in raport.\nCreate a temporary df used for type casting the appropriate datatype to columns.\nPrint topp rows on temporary df to validate the content.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\n|1       |2025-05-01 00:07:06 |2025-05-01 00:24:15  |1              |3.7          |1         |false             |140         |202         |1           |18.4       |4.25 |0.5    |4.85      |0.0         |1.0                  |29.0        |2.5                 |0.0        |0.75              |\n|2       |2025-05-01 00:07:44 |2025-05-01 00:14:27  |1              |1.03         |1         |false             |234         |161         |1           |8.6        |1.0  |0.5    |4.3       |0.0         |1.0                  |18.65       |2.5                 |0.0        |0.75              |\n|2       |2025-05-01 00:15:56 |2025-05-01 00:23:53  |1              |1.57         |1         |false             |161         |234         |2           |10.0       |1.0  |0.5    |0.0       |0.0         |1.0                  |15.75       |2.5                 |0.0        |0.75              |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mtypeFix\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 18 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=153"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764575_809633582","id":"paragraph_1761758255383_22662916","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:50+0000","dateStarted":"2025-10-31T14:33:48+0000"},{"text":"%spark\n// Ref. '2.2.3.2 Validering av Type Casting' in raport.\nprint(\"Ref. '2.2.3.2 Validering av Type Casting' in raport.\\n\")\ntypeFix.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:33:50+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.3.2 Validering av Type Casting' in raport.\nroot\n |-- VendorID: byte (nullable = true)\n |-- tpep_pickup_datetime: timestamp (nullable = true)\n |-- tpep_dropoff_datetime: timestamp (nullable = true)\n |-- passenger_count: byte (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: byte (nullable = true)\n |-- store_and_fwd_flag: boolean (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: byte (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764577_1220640392","id":"paragraph_1761771045030_661047933","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:51+0000","dateStarted":"2025-10-31T14:33:50+0000"},{"text":"%spark\n// Ref. '2.2.3.2 Validering av Type Casting' in raport.\n// Controll that boolean casting has been done properly.\nprint(\"Ref. '2.2.3.2 Validering av Type Casting' in raport..\\n\")\nprint(\"Controll that boolean casting has been done properly, and that the number of values are consistent.\\n\")\nprint(\"Controll that 'Y'=='true':\\n\")\nprint(df.select(\"store_and_fwd_flag\").filter(col(\"store_and_fwd_flag\") === lit(\"Y\")).count())\nprint(\"\\n\")\nprint(typeFix.select(\"store_and_fwd_flag\").filter(col(\"store_and_fwd_flag\") === lit(\"true\")).count())\nprint(\"\\nControll that 'N'=='false':\\n\")\nprint(df.select(\"store_and_fwd_flag\").filter(col(\"store_and_fwd_flag\") === lit(\"N\")).count())\nprint(\"\\n\")\nprint(typeFix.select(\"store_and_fwd_flag\").filter(col(\"store_and_fwd_flag\") === lit(\"false\")).count())\nprint(\"\\n\")\nprint(\"\\nControll that 'NULL'=='NULL':\\n\")\nprint(df.filter(col(\"store_and_fwd_flag\").isNull).count())\nprint(\"\\n\")\nprint(typeFix.filter(col(\"store_and_fwd_flag\").isNull).count())\n","user":"anonymous","dateUpdated":"2025-10-31T14:33:51+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.3.2 Validering av Type Casting' in raport..\nControll that boolean casting has been done properly, and that the number of values are consistent.\nControll that 'Y'=='true':\n79145\n79145\nControll that 'N'=='false':\n21445846\n21445846\n\nControll that 'NULL'=='NULL':\n6457356\n6457356"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=154"},{"jobUrl":"http://localhost:4040/jobs/job?id=155"},{"jobUrl":"http://localhost:4040/jobs/job?id=156"},{"jobUrl":"http://localhost:4040/jobs/job?id=157"},{"jobUrl":"http://localhost:4040/jobs/job?id=158"},{"jobUrl":"http://localhost:4040/jobs/job?id=159"},{"jobUrl":"http://localhost:4040/jobs/job?id=160"},{"jobUrl":"http://localhost:4040/jobs/job?id=161"},{"jobUrl":"http://localhost:4040/jobs/job?id=162"},{"jobUrl":"http://localhost:4040/jobs/job?id=163"},{"jobUrl":"http://localhost:4040/jobs/job?id=164"},{"jobUrl":"http://localhost:4040/jobs/job?id=165"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764578_102632912","id":"paragraph_1761760217868_1671839012","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:57+0000","dateStarted":"2025-10-31T14:33:51+0000"},{"text":"%spark\n// Ref. '2.2.3.2 Validering av Type Casting' in raport.\n// Controll that the number of rows are consistent.\nprint(\"Ref. '2.2.3.2 Validering av Type Casting' in raport.\\n\")\nprint(\"Controll that the total number of rows are consistent between original and temporary df.\\n\")\nprint(\"Subtract number of rows in temporary df from original. Expected result is '0'.\\n\")\ndf.count() - typeFix.count()","user":"anonymous","dateUpdated":"2025-10-31T14:33:57+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.3.2 Validering av Type Casting' in raport.\nControll that the total number of rows are consistent between original and temporary df.\nSubtract number of rows in temporary df from original. Expected result is '0'.\n\u001b[1m\u001b[34mres64\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 0\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=166"},{"jobUrl":"http://localhost:4040/jobs/job?id=167"},{"jobUrl":"http://localhost:4040/jobs/job?id=168"},{"jobUrl":"http://localhost:4040/jobs/job?id=169"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764578_1420191563","id":"paragraph_1761759800905_243537792","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:33:59+0000","dateStarted":"2025-10-31T14:33:57+0000"},{"text":"%spark\n// Overwrite original df with the df containing correct dataTypes.\nprint(\"Overwrite original df with the temporary df containing correct dataTypes.\\n\")\nprint(\"Print out list of columns from new main df to validate that datatypes have been cast as expected.\\n\")\nval df = typeFix\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:33:59+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Overwrite original df with the temporary df containing correct dataTypes.\nPrint out list of columns from new main df to validate that datatypes have been cast as expected.\nroot\n |-- VendorID: byte (nullable = true)\n |-- tpep_pickup_datetime: timestamp (nullable = true)\n |-- tpep_dropoff_datetime: timestamp (nullable = true)\n |-- passenger_count: byte (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: byte (nullable = true)\n |-- store_and_fwd_flag: boolean (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: byte (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 18 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764579_1409646","id":"paragraph_1761759729724_2109480165","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:00+0000","dateStarted":"2025-10-31T14:33:59+0000"},{"text":"%spark\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Build trip_duration_min, hour_of_day, day_of_week.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Build columns for 'travel speed', 'trip duration' and spesification for pickup/dropoff times.\\n\")\nval dfWithSpeed =\n  df\n    .withColumn(\"pickup_day\", col(\"tpep_pickup_datetime\"))\n    .withColumn(\"dropoff_day\", col(\"tpep_dropoff_datetime\"))\n    .withColumn(\"pickup_sec\",  col(\"tpep_pickup_datetime\").cast(\"long\"))\n    .withColumn(\"dropoff_sec\", col(\"tpep_dropoff_datetime\").cast(\"long\"))\n    // duration in hours.\n    .withColumn(\"duration_hours\",\n      (col(\"dropoff_sec\") - col(\"pickup_sec\")) / 3600.0\n    )\n    // speed = miles / hours.\n    .withColumn(\n      \"Speed_miles_pr_hour\",\n      when(col(\"duration_hours\") > 0,\n           col(\"trip_distance\") / col(\"duration_hours\")\n      ).otherwise(lit(null).cast(\"double\"))\n    )\n    // Travel duration in minutes.\n    .withColumn(\n        \"trip_duration_min\",\n        when(not(col(\"duration_hours\").isNull),\n            col(\"duration_hours\") * 60\n        ).otherwise(lit(null).cast(\"double\"))\n    )\n    .drop(\"pickup_sec\",\"dropoff_sec\",\"duration_hours\")\n    .withColumn(\"Speed_miles_pr_hour\", round(col(\"Speed_miles_pr_hour\"), 2))\n    .withColumn(\"trip_duration_min\", round(col(\"trip_duration_min\"), 2))\n    .withColumn(\"hour_of_day\", date_format(col(\"pickup_day\"), \"k\"))\n    .withColumn(\"pickup_day\", dayofweek(col(\"pickup_day\")))\n    .withColumn(\"dropoff_day\", dayofweek(col(\"dropoff_day\")))","user":"anonymous","dateUpdated":"2025-10-31T14:34:00+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nBuild columns for 'travel speed', 'trip duration' and spesification for pickup/dropoff times.\n\u001b[1m\u001b[34mdfWithSpeed\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764580_658420021","id":"paragraph_1761566888376_1452446561","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:01+0000","dateStarted":"2025-10-31T14:34:00+0000"},{"text":"// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Validate that numbers of rows are the same.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Validate that numbers of rows are the same.\\n\")\n\nprint(df.count())\nprint(\"\\n\")\nprint(dfWithSpeed.count())","user":"anonymous","dateUpdated":"2025-10-31T14:34:01+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nValidate that numbers of rows are the same.\n27982347\n27982347"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=170"},{"jobUrl":"http://localhost:4040/jobs/job?id=171"},{"jobUrl":"http://localhost:4040/jobs/job?id=172"},{"jobUrl":"http://localhost:4040/jobs/job?id=173"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764581_456215220","id":"paragraph_1761775434284_711940708","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:02+0000","dateStarted":"2025-10-31T14:34:01+0000"},{"text":"%spark\r\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\r\n// Validate content of dfWithSpeed.\r\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\r\nprint(\"Validate content of dfWithSpeed.\\n\")\r\n\r\ndfWithSpeed.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:34:02+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nValidate content of dfWithSpeed.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-05-01 00:07:06 |2025-05-01 00:24:15  |1              |3.7          |1         |false             |140         |202         |1           |18.4       |4.25 |0.5    |4.85      |0.0         |1.0                  |29.0        |2.5                 |0.0        |0.75              |5         |5          |12.94              |17.15            |24         |\n|2       |2025-05-01 00:07:44 |2025-05-01 00:14:27  |1              |1.03         |1         |false             |234         |161         |1           |8.6        |1.0  |0.5    |4.3       |0.0         |1.0                  |18.65       |2.5                 |0.0        |0.75              |5         |5          |9.2                |6.72             |24         |\n|2       |2025-05-01 00:15:56 |2025-05-01 00:23:53  |1              |1.57         |1         |false             |161         |234         |2           |10.0       |1.0  |0.5    |0.0       |0.0         |1.0                  |15.75       |2.5                 |0.0        |0.75              |5         |5          |11.85              |7.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=174"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764582_479125741","id":"paragraph_1761775479031_1301581358","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:04+0000","dateStarted":"2025-10-31T14:34:02+0000"},{"text":"%spark\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Counting rows with higher speed than 80miles/hour.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Counting rows with higher speed than 80miles/hour.\\n\")\n\ndfWithSpeed.filter(col(\"Speed_miles_pr_hour\") > 80 || col(\"Speed_miles_pr_hour\").isNull).count()","user":"anonymous","dateUpdated":"2025-10-31T14:34:04+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nCounting rows with higher speed than 80miles/hour.\n\u001b[1m\u001b[34mres68\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 260984\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=175"},{"jobUrl":"http://localhost:4040/jobs/job?id=176"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764583_515375104","id":"paragraph_1761775628729_306434069","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:23+0000","dateStarted":"2025-10-31T14:34:04+0000"},{"text":"%spark\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Creating a new df excluding rows where speed > 80 or speed == NULL.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Creating a new df excluding rows where speed > 80 or speed == NULL.\\n\")\n\nval dfWithSpeedRmHighSpeedAndNull = dfWithSpeed.filter(col(\"Speed_miles_pr_hour\") <= 80)\ndfWithSpeedRmHighSpeedAndNull.count()","user":"anonymous","dateUpdated":"2025-10-31T14:34:23+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nCreating a new df excluding rows where speed > 80 or speed == NULL.\n\u001b[1m\u001b[34mdfWithSpeedRmHighSpeedAndNull\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n\u001b[1m\u001b[34mres69\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27721363\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=177"},{"jobUrl":"http://localhost:4040/jobs/job?id=178"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764583_1115784581","id":"paragraph_1761566945385_898091463","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:31+0000","dateStarted":"2025-10-31T14:34:23+0000"},{"text":"%spark\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Validate that exluded rows matches count on rows with higher speed than 80miler/hour.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Validate that exluded rows matches count on rows with higher speed than 80miler/hour.\\n\")\n\ndfWithSpeedRmHighSpeedAndNull.count() - df.count()","user":"anonymous","dateUpdated":"2025-10-31T14:34:31+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nValidate that exluded rows matches count on rows with higher speed than 80miler/hour.\n\u001b[1m\u001b[34mres70\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = -260984\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=179"},{"jobUrl":"http://localhost:4040/jobs/job?id=180"},{"jobUrl":"http://localhost:4040/jobs/job?id=181"},{"jobUrl":"http://localhost:4040/jobs/job?id=182"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764584_541873986","id":"paragraph_1761775992897_1163924280","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:45+0000","dateStarted":"2025-10-31T14:34:31+0000"},{"text":"%spark\n// Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\n// Make df with exluded speed rows the new main df.\nprint(\"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\\n\")\nprint(\"Make df with exluded speed rows the new main df.\\n\")\nval df = dfWithSpeedRmHighSpeedAndNull\n// Validate content of new main df.\nprint(\"Validate content of new main df.\\n\")\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:34:45+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.1 Filtrering på Hastighet' in raport.\nMake df with exluded speed rows the new main df.\nValidate content of new main df.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-05-01 00:07:06 |2025-05-01 00:24:15  |1              |3.7          |1         |false             |140         |202         |1           |18.4       |4.25 |0.5    |4.85      |0.0         |1.0                  |29.0        |2.5                 |0.0        |0.75              |5         |5          |12.94              |17.15            |24         |\n|2       |2025-05-01 00:07:44 |2025-05-01 00:14:27  |1              |1.03         |1         |false             |234         |161         |1           |8.6        |1.0  |0.5    |4.3       |0.0         |1.0                  |18.65       |2.5                 |0.0        |0.75              |5         |5          |9.2                |6.72             |24         |\n|2       |2025-05-01 00:15:56 |2025-05-01 00:23:53  |1              |1.57         |1         |false             |161         |234         |2           |10.0       |1.0  |0.5    |0.0       |0.0         |1.0                  |15.75       |2.5                 |0.0        |0.75              |5         |5          |11.85              |7.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=183"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764585_1546489400","id":"paragraph_1761566958121_1233036577","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:34:47+0000","dateStarted":"2025-10-31T14:34:45+0000"},{"text":"%spark\n// Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\n// Count rows where total_amout is 0 or lower.\nprint(\"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\\n\")\nprint(\"Count rows where total_amout is 0 or lower.\\n\")\ndf.filter(col(\"total_amount\") <= 0).count()","user":"anonymous","dateUpdated":"2025-10-31T14:34:47+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\nCount rows where total_amout is 0 or lower.\n\u001b[1m\u001b[34mres72\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 526220\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=184"},{"jobUrl":"http://localhost:4040/jobs/job?id=185"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764587_92064117","id":"paragraph_1761777103533_193726787","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:03+0000","dateStarted":"2025-10-31T14:34:47+0000"},{"text":"%spark\n// Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\n// Create new df excluding rows where total_amount is 0 or lower.\nprint(\"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\\n\")\nprint(\"Create new df excluding rows where total_amount is 0 or lower.\\n\")\nval PositiveFare = df.filter(col(\"total_amount\") > 0)","user":"anonymous","dateUpdated":"2025-10-31T14:35:03+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\nCreate new df excluding rows where total_amount is 0 or lower.\n\u001b[1m\u001b[34mPositiveFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764588_1796175577","id":"paragraph_1761566966018_1422037310","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:05+0000","dateStarted":"2025-10-31T14:35:04+0000"},{"text":"%spark\n// Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\n// Validate that number of excluded rows match the number of 0 or negative values in total_amount.\nprint(\"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\\n\")\nprint(\"Validate that number of excluded rows match the number of 0 or negative values in total_amount.\\n\")\nPositiveFare.count() - df.count()","user":"anonymous","dateUpdated":"2025-10-31T14:35:05+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\nValidate that number of excluded rows match the number of 0 or negative values in total_amount.\n\u001b[1m\u001b[34mres73\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = -526220\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=186"},{"jobUrl":"http://localhost:4040/jobs/job?id=187"},{"jobUrl":"http://localhost:4040/jobs/job?id=188"},{"jobUrl":"http://localhost:4040/jobs/job?id=189"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764588_725088171","id":"paragraph_1761777214070_853511772","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:22+0000","dateStarted":"2025-10-31T14:35:06+0000"},{"text":"%spark\n// Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\n// Make df with excluded 0 or negative values in total_amount the new main df.\nprint(\"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\\n\")\nprint(\"Make df with excluded 0 or negative values in total_amount the new main df.\\n\")\nval df = PositiveFare\n// Validate content of new main df.\nprint(\"Validate content of new main df.\\n\")\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:35:22+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.4.2 Filtrering på Betalingsbeløp' in raport.\nMake df with excluded 0 or negative values in total_amount the new main df.\nValidate content of new main df.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\n|1       |2025-05-01 00:07:06 |2025-05-01 00:24:15  |1              |3.7          |1         |false             |140         |202         |1           |18.4       |4.25 |0.5    |4.85      |0.0         |1.0                  |29.0        |2.5                 |0.0        |0.75              |5         |5          |12.94              |17.15            |24         |\n|2       |2025-05-01 00:07:44 |2025-05-01 00:14:27  |1              |1.03         |1         |false             |234         |161         |1           |8.6        |1.0  |0.5    |4.3       |0.0         |1.0                  |18.65       |2.5                 |0.0        |0.75              |5         |5          |9.2                |6.72             |24         |\n|2       |2025-05-01 00:15:56 |2025-05-01 00:23:53  |1              |1.57         |1         |false             |161         |234         |2           |10.0       |1.0  |0.5    |0.0       |0.0         |1.0                  |15.75       |2.5                 |0.0        |0.75              |5         |5          |11.85              |7.95             |24         |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=190"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764589_2121598587","id":"paragraph_1761777343281_650347390","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:25+0000","dateStarted":"2025-10-31T14:35:23+0000"},{"text":"%spark\n// Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\n// New df excluding rows where number of passanger are 0 or lower.\nprint(\"Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\\n\")\nprint(\"New df excluding rows where number of passanger are 0 or lower.\\n\")\nval passengerMoreThanZero = df.filter(col(\"passenger_count\") > 0)","user":"anonymous","dateUpdated":"2025-10-31T14:35:25+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\nNew df excluding rows where number of passanger are 0 or lower.\n\u001b[1m\u001b[34mpassengerMoreThanZero\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764590_1932398514","id":"paragraph_1761566989268_1950751723","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:26+0000","dateStarted":"2025-10-31T14:35:25+0000"},{"text":"%spark\n// Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\n// Make df excluding 0 or less passangers the new main df.\nprint(\"Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\\n\")\nprint(\"Make df excluding 0 or less passangers the new main df.\\n\")\nval df = passengerMoreThanZero","user":"anonymous","dateUpdated":"2025-10-31T14:35:26+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5 Filtrering på antall Passasjerer' in raport.\nMake df excluding 0 or less passangers the new main df.\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 23 more fields]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764591_932737995","id":"paragraph_1761567000047_717549448","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:27+0000","dateStarted":"2025-10-31T14:35:27+0000"},{"text":"%spark\nprint(\"Validating the types of new main df.\\n\")\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:35:27+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Validating the types of new main df.\nroot\n |-- VendorID: byte (nullable = true)\n |-- tpep_pickup_datetime: timestamp (nullable = true)\n |-- tpep_dropoff_datetime: timestamp (nullable = true)\n |-- passenger_count: byte (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: byte (nullable = true)\n |-- store_and_fwd_flag: boolean (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: byte (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n |-- pickup_day: integer (nullable = true)\n |-- dropoff_day: integer (nullable = true)\n |-- Speed_miles_pr_hour: double (nullable = true)\n |-- trip_duration_min: double (nullable = true)\n |-- hour_of_day: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764592_801666969","id":"paragraph_1761567011213_1814455056","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:29+0000","dateStarted":"2025-10-31T14:35:28+0000"},{"text":"%spark\n// Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\n// Option 1 (which I personally prefer)\n// Create a df containing the date and the number of trips.\nprint(\"Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\\n\")\nprint(\"Option 1 (which I personally prefer).\\n\")\nprint(\"Create a df containing the date and the number of trips.\\n\")\nval daily_trips = df\n    .withColumn(\"dates\", col(\"tpep_pickup_datetime\"))\n    .groupBy(to_date(col(\"dates\")).as(\"date\"))\n    .agg(count(lit(1)).as(\"number_of_trips\"))\n    .orderBy(col(\"date\"))\ndaily_trips.show(truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:35:29+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\nOption 1 (which I personally prefer).\nCreate a df containing the date and the number of trips.\n+----------+---------------+\n|date      |number_of_trips|\n+----------+---------------+\n|2007-12-05|1              |\n|2009-01-01|2              |\n|2024-12-31|20             |\n|2025-01-01|71524          |\n|2025-01-02|78563          |\n|2025-01-03|84854          |\n|2025-01-04|90226          |\n|2025-01-05|73238          |\n|2025-01-06|73777          |\n|2025-01-07|89624          |\n|2025-01-08|96928          |\n|2025-01-09|101066         |\n|2025-01-10|95176          |\n|2025-01-11|100477         |\n|2025-01-12|82139          |\n|2025-01-13|85860          |\n|2025-01-14|101109         |\n|2025-01-15|103820         |\n|2025-01-16|110888         |\n|2025-01-17|96830          |\n+----------+---------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mdaily_trips\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: date, number_of_trips: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=191"},{"jobUrl":"http://localhost:4040/jobs/job?id=192"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764593_835370789","id":"paragraph_1761781372359_1085406895","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:38+0000","dateStarted":"2025-10-31T14:35:29+0000"},{"text":"%spark\n// Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\n// Option 2\n// Create a df containing the date and the number of trips.\nprint(\"Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\\n\")\nprint(\"Option 2\\n\")\nprint(\"Create a df containing the date and the number of trips.\\n\")\nval daily_trips2 = df\n    .withColumn(\"pickup\", col(\"tpep_pickup_datetime\"))\n    .withColumn(\"date\", date_trunc(\"DAY\", col(\"pickup\")))\n    .groupBy(\"date\")\n    .count().as(\"number_of_trips\")\n    .orderBy(\"date\")\n\ndaily_trips2.show(truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:35:38+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5.2 Kalkulere Daglige Turer' in raport.\nOption 2\nCreate a df containing the date and the number of trips.\n+-------------------+------+\n|date               |count |\n+-------------------+------+\n|2007-12-05 00:00:00|1     |\n|2009-01-01 00:00:00|2     |\n|2024-12-31 00:00:00|20    |\n|2025-01-01 00:00:00|71524 |\n|2025-01-02 00:00:00|78563 |\n|2025-01-03 00:00:00|84854 |\n|2025-01-04 00:00:00|90226 |\n|2025-01-05 00:00:00|73238 |\n|2025-01-06 00:00:00|73777 |\n|2025-01-07 00:00:00|89624 |\n|2025-01-08 00:00:00|96928 |\n|2025-01-09 00:00:00|101066|\n|2025-01-10 00:00:00|95176 |\n|2025-01-11 00:00:00|100477|\n|2025-01-12 00:00:00|82139 |\n|2025-01-13 00:00:00|85860 |\n|2025-01-14 00:00:00|101109|\n|2025-01-15 00:00:00|103820|\n|2025-01-16 00:00:00|110888|\n|2025-01-17 00:00:00|96830 |\n+-------------------+------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mdaily_trips2\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: timestamp, count: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=193"},{"jobUrl":"http://localhost:4040/jobs/job?id=194"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764593_899533581","id":"paragraph_1761781640658_1802004812","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:47+0000","dateStarted":"2025-10-31T14:35:38+0000"},{"text":"%spark\n// Ref. '2.2.5.3 Kalkulere Median for Reisetid' in rapport.\n// Create a df finding the median of each trip duration in minutes.\nprint(\"Ref. '2.2.5.3 Kalkulere Median for Reisetid' in rapport.\\n\")\nprint(\"Create a df finding the median of each trip duration in minutes.\\n\")\nval median_duration = df.select(\"trip_duration_min\")\nmedian_duration.select(median(col(\"trip_duration_min\")).as(\"median_trip_duration\")).show()","user":"anonymous","dateUpdated":"2025-10-31T14:35:47+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5.3 Kalkulere Median for Reisetid' in rapport.\nCreate a df finding the median of each trip duration in minutes.\n+--------------------+\n|median_trip_duration|\n+--------------------+\n|               12.17|\n+--------------------+\n\n\u001b[1m\u001b[34mmedian_duration\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [trip_duration_min: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=195"},{"jobUrl":"http://localhost:4040/jobs/job?id=196"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764594_1560937132","id":"paragraph_1761781978419_1213889793","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:35:59+0000","dateStarted":"2025-10-31T14:35:47+0000"},{"text":"%spark\n// Ref. '2.2.5.4 Kalkulere Total Billettpris per Dag' in raport.\n// Create a df finding the total fare for each date.\nprint(\"Ref. '2.2.5.4 Kalkulere Total Billettpris per Dag' in raport.\\n\")\nprint(\"Create a df finding the total fare for each date.\\n\")\nval total_fare_by_day = df\n    .withColumn(\"dates\", col(\"tpep_pickup_datetime\"))\n    .groupBy(to_date(col(\"dates\")).as(\"date\"))\n    .agg(round(sum(col(\"total_amount\")), 2).as(\"total_fare_by_day\"))\n    .orderBy(col(\"date\"))\n\ntotal_fare_by_day.show(truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:36:00+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.5.4 Kalkulere Total Billettpris per Dag' in raport.\nCreate a df finding the total fare for each date.\n+----------+-----------------+\n|date      |total_fare_by_day|\n+----------+-----------------+\n|2007-12-05|22.75            |\n|2009-01-01|170.27           |\n|2024-12-31|519.87           |\n|2025-01-01|2133149.93       |\n|2025-01-02|2342147.83       |\n|2025-01-03|2400697.83       |\n|2025-01-04|2432004.75       |\n|2025-01-05|2176739.42       |\n|2025-01-06|2143768.44       |\n|2025-01-07|2441461.95       |\n|2025-01-08|2587399.41       |\n|2025-01-09|2767687.81       |\n|2025-01-10|2638094.9        |\n|2025-01-11|2579289.23       |\n|2025-01-12|2320849.8        |\n|2025-01-13|2410455.72       |\n|2025-01-14|2749768.15       |\n|2025-01-15|2828314.87       |\n|2025-01-16|3074961.78       |\n|2025-01-17|2711745.5        |\n+----------+-----------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mtotal_fare_by_day\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [date: date, total_fare_by_day: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=197"},{"jobUrl":"http://localhost:4040/jobs/job?id=198"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764595_1245914884","id":"paragraph_1761782016137_1218559479","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:09+0000","dateStarted":"2025-10-31T14:36:00+0000"},{"text":"%spark\n// Ref. '2.2.6.1 Import av Taxi Soner' in raport.\n// Import of MapZone data:\nprint(\"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\\n\")\nprint(\"Import of MapZone data:\\n\")\nprint(\"Build Custom schema (LocationID got defined as a string without).\\n\")\nprint(\"Validating content of new df:\\n\")\n\n//File location.\nval base = (\"/sparkio/TLC/mapZones/taxi_zone_lookup.csv\")\n\n// Custom schema (LocationID got defined as a string without).\nval zoneSchema = StructType(Array(\n    StructField(\"LocationID\", IntegerType, true),\n    StructField(\"Borough\", StringType, true),\n    StructField(\"Zone\", StringType, true),\n    StructField(\"service_zone\", StringType, true)\n))\n\n// Import of data to df.\nval dfZone = spark.read\n\t.option(\"header\", \"true\")\n    .schema(zoneSchema)\n    .csv(base)\n\n// Validating content of new df.\ndfZone.show(3, truncate = false)\n","user":"anonymous","dateUpdated":"2025-10-31T14:36:09+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\nImport of MapZone data:\nBuild Custom schema (LocationID got defined as a string without).\nValidating content of new df:\n+----------+-------+-----------------------+------------+\n|LocationID|Borough|Zone                   |service_zone|\n+----------+-------+-----------------------+------------+\n|1         |EWR    |Newark Airport         |EWR         |\n|2         |Queens |Jamaica Bay            |Boro Zone   |\n|3         |Bronx  |Allerton/Pelham Gardens|Boro Zone   |\n+----------+-------+-----------------------+------------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mbase\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/mapZones/taxi_zone_lookup.csv\n\u001b[1m\u001b[34mzoneSchema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(LocationID,IntegerType,true),StructField(Borough,StringType,true),StructField(Zone,StringType,true),StructField(service_zone,StringType,true))\n\u001b[1m\u001b[34mdfZone\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [LocationID: int, Borough: string ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=199"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764596_810898664","id":"paragraph_1761567019716_1142303959","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:10+0000","dateStarted":"2025-10-31T14:36:09+0000"},{"text":"%spark\n// Ref. '2.2.6.1 Import av Taxi Soner' in raport.\n// Validation of datatypes on df.\nprint(\"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\\n\")\nprint(\"Validation of datatypes on df.\\n\")\ndfZone.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:36:10+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\nValidation of datatypes on df.\nroot\n |-- LocationID: integer (nullable = true)\n |-- Borough: string (nullable = true)\n |-- Zone: string (nullable = true)\n |-- service_zone: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764596_453047365","id":"paragraph_1761782476212_998311919","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:10+0000","dateStarted":"2025-10-31T14:36:10+0000"},{"text":"%spark\n// Ref. '2.2.6.1 Import av Taxi Soner' in raport.\n// Controll that location get right placing in dfWithLocationNames\nprint(\"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\\n\")\nprint(\"Controll that location get right placing in dfWithLocationNames.\\n\")\ndfZone.filter(\"LocationID = 1\").select(\"Zone\").show()","user":"anonymous","dateUpdated":"2025-10-31T14:36:10+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.1 Import av Taxi Soner' in raport.\nControll that location get right placing in dfWithLocationNames.\n+--------------+\n|          Zone|\n+--------------+\n|Newark Airport|\n+--------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=200"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764597_2115570464","id":"paragraph_1761782601270_1901610021","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:11+0000","dateStarted":"2025-10-31T14:36:10+0000"},{"text":"%spark\n// Ref. '2.2.6.2 Left-Join Lokasjonnavn til Hoveddatasett' in raport.\n// Create new df to contain location names corresponding with locationIDs.\n// Two left joins to add pickup and dropoff location names.\nprint(\"Ref. '2.2.6.2 Left-Join Lokasjonnavn til Hoveddatasett' in raport.\\n\")\nprint(\"Create new df to contain location names corresponding with locationIDs.\\n\")\nprint(\"Two left joins to add pickup and dropoff location names.\\n\")\nval dfWithLocationNames =\n  df.alias(\"m\")\n    .join(dfZone.alias(\"zpu\"),\n        col(\"m.PULocationID\") === col(\"zpu.LocationID\"),\n        \"left\")\n    .join(dfZone.alias(\"zdo\"),\n        col(\"m.DOLocationID\") === col (\"zdo.LocationID\"),\n        \"left\")\n    .select(col(\"m.*\"),\n        col(\"zpu.Zone\").as(\"pickup_location_name\"),\n        col(\"zpu.Borough\").as(\"PU_Borough\"),\n        col(\"zdo.Zone\").as(\"dropoff_location_name\"),\n        col(\"zdo.Borough\").as(\"DO_Borough\"))\n\n// Validate content of new df.\nprint(\"Validate content of new df.\\n\")\ndfWithLocationNames.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:36:11+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.2 Left-Join Lokasjonnavn til Hoveddatasett' in raport.\nCreate new df to contain location names corresponding with locationIDs.\nTwo left joins to add pickup and dropoff location names.\nValidate content of new df.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|pickup_location_name   |PU_Borough|dropoff_location_name|DO_Borough|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\n|1       |2025-04-01 00:56:30 |2025-04-01 01:00:49  |2              |0.6          |1         |false             |79          |4           |1           |6.5        |4.25 |0.5    |2.45      |0.0         |1.0                  |14.7        |2.5                 |0.0        |0.75              |3         |3          |8.34               |4.32             |24         |East Village           |Manhattan |Alphabet City        |Manhattan |\n|2       |2025-02-01 00:40:04 |2025-02-01 00:49:15  |1              |1.4          |1         |false             |114         |79          |1           |10.0       |1.0  |0.5    |3.15      |0.0         |1.0                  |18.9        |2.5                 |0.0        |0.75              |7         |7          |9.15               |9.18             |24         |Greenwich Village South|Manhattan |East Village         |Manhattan |\n|1       |2025-07-01 00:23:28 |2025-07-01 01:07:44  |1              |17.7         |2         |false             |132         |142         |1           |70.0       |4.25 |0.5    |5.0       |0.0         |1.0                  |80.75       |2.5                 |1.75       |0.0               |3         |3          |23.99              |44.27            |24         |JFK Airport            |Queens    |Lincoln Square East  |Manhattan |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdfWithLocationNames\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 27 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=201"},{"jobUrl":"http://localhost:4040/jobs/job?id=202"},{"jobUrl":"http://localhost:4040/jobs/job?id=203"},{"jobUrl":"http://localhost:4040/jobs/job?id=204"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764598_2127685887","id":"paragraph_1761567037256_890119508","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:25+0000","dateStarted":"2025-10-31T14:36:11+0000"},{"text":"%spark\n// Make df with location names included the new main df.\nprint(\"Make df with location names included the new main df.\\n\")\nval df = dfWithLocationNames\n\n// Validate content of new main df.\nprint(\"Validate content of new main df.\\n\")\ndf.show(3, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:36:25+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Make df with location names included the new main df.\nValidate content of new main df.\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\n|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|Airport_fee|cbd_congestion_fee|pickup_day|dropoff_day|Speed_miles_pr_hour|trip_duration_min|hour_of_day|pickup_location_name   |PU_Borough|dropoff_location_name|DO_Borough|\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\n|1       |2025-04-01 00:56:30 |2025-04-01 01:00:49  |2              |0.6          |1         |false             |79          |4           |1           |6.5        |4.25 |0.5    |2.45      |0.0         |1.0                  |14.7        |2.5                 |0.0        |0.75              |3         |3          |8.34               |4.32             |24         |East Village           |Manhattan |Alphabet City        |Manhattan |\n|2       |2025-02-01 00:40:04 |2025-02-01 00:49:15  |1              |1.4          |1         |false             |114         |79          |1           |10.0       |1.0  |0.5    |3.15      |0.0         |1.0                  |18.9        |2.5                 |0.0        |0.75              |7         |7          |9.15               |9.18             |24         |Greenwich Village South|Manhattan |East Village         |Manhattan |\n|2       |2025-04-01 00:24:07 |2025-04-01 00:35:12  |1              |5.41         |1         |false             |132         |130         |1           |22.6       |1.0  |0.5    |5.37      |0.0         |1.0                  |32.22       |0.0                 |1.75       |0.0               |3         |3          |29.29              |11.08            |24         |JFK Airport            |Queens    |Jamaica              |Queens    |\n+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+------------------+----------+-----------+-------------------+-----------------+-----------+-----------------------+----------+---------------------+----------+\nonly showing top 3 rows\n\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: tinyint, tpep_pickup_datetime: timestamp ... 27 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=205"},{"jobUrl":"http://localhost:4040/jobs/job?id=206"},{"jobUrl":"http://localhost:4040/jobs/job?id=207"},{"jobUrl":"http://localhost:4040/jobs/job?id=208"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764599_1822706633","id":"paragraph_1761567049661_613005408","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:29+0000","dateStarted":"2025-10-31T14:36:25+0000"},{"text":"%spark\n// Validate schema on new main df.\nprint(\"Validate schema on new main df.\\n\")\ndf.printSchema()","user":"anonymous","dateUpdated":"2025-10-31T14:36:29+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Validate schema on new main df.\nroot\n |-- VendorID: byte (nullable = true)\n |-- tpep_pickup_datetime: timestamp (nullable = true)\n |-- tpep_dropoff_datetime: timestamp (nullable = true)\n |-- passenger_count: byte (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- RatecodeID: byte (nullable = true)\n |-- store_and_fwd_flag: boolean (nullable = true)\n |-- PULocationID: integer (nullable = true)\n |-- DOLocationID: integer (nullable = true)\n |-- payment_type: byte (nullable = true)\n |-- fare_amount: double (nullable = true)\n |-- extra: double (nullable = true)\n |-- mta_tax: double (nullable = true)\n |-- tip_amount: double (nullable = true)\n |-- tolls_amount: double (nullable = true)\n |-- improvement_surcharge: double (nullable = true)\n |-- total_amount: double (nullable = true)\n |-- congestion_surcharge: double (nullable = true)\n |-- Airport_fee: double (nullable = true)\n |-- cbd_congestion_fee: double (nullable = true)\n |-- pickup_day: integer (nullable = true)\n |-- dropoff_day: integer (nullable = true)\n |-- Speed_miles_pr_hour: double (nullable = true)\n |-- trip_duration_min: double (nullable = true)\n |-- hour_of_day: string (nullable = true)\n |-- pickup_location_name: string (nullable = true)\n |-- PU_Borough: string (nullable = true)\n |-- dropoff_location_name: string (nullable = true)\n |-- DO_Borough: string (nullable = true)\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764600_1522300271","id":"paragraph_1761567248278_1118524426","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:36:30+0000","dateStarted":"2025-10-31T14:36:29+0000"},{"text":"%spark\nprint(\"Control the current number of rows in new main df.\\n\")\ndf.count()","user":"anonymous","dateUpdated":"2025-10-31T14:36:30+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Control the current number of rows in new main df.\n\u001b[1m\u001b[34mres86\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 20622905\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=209"},{"jobUrl":"http://localhost:4040/jobs/job?id=210"},{"jobUrl":"http://localhost:4040/jobs/job?id=211"},{"jobUrl":"http://localhost:4040/jobs/job?id=212"},{"jobUrl":"http://localhost:4040/jobs/job?id=213"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764601_152451757","id":"paragraph_1761567258644_1531890191","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:37:33+0000","dateStarted":"2025-10-31T14:36:30+0000"},{"text":"%spark\n// Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\n// new df containing a descending list of trip volume per location.\nprint(\"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\\n\")\nprint(\"new df containing a descending list of trip volume per location.\\n\")\nval topTripVolume = df\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\n\t.groupBy(col(\"zone\"))\n\t.agg(count(col(\"pickup_location_name\")).as(\"trip_volume\"))\n\t.orderBy(desc(\"trip_volume\"))\n\nprint(\"Print out top 10 results:\\n\")\ntopTripVolume.show(10, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:37:33+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\nnew df containing a descending list of trip volume per location.\nPrint out top 10 results:\n+----------------------------+-----------+\n|zone                        |trip_volume|\n+----------------------------+-----------+\n|JFK Airport                 |1071452    |\n|Upper East Side South       |1059958    |\n|Midtown Center              |1043638    |\n|Upper East Side North       |910008     |\n|Penn Station/Madison Sq West|775933     |\n|Midtown East                |758521     |\n|Times Sq/Theatre District   |745292     |\n|LaGuardia Airport           |699497     |\n|Lincoln Square East         |662939     |\n|Midtown North               |614640     |\n+----------------------------+-----------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripVolume\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, trip_volume: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=214"},{"jobUrl":"http://localhost:4040/jobs/job?id=215"},{"jobUrl":"http://localhost:4040/jobs/job?id=216"},{"jobUrl":"http://localhost:4040/jobs/job?id=217"},{"jobUrl":"http://localhost:4040/jobs/job?id=218"},{"jobUrl":"http://localhost:4040/jobs/job?id=219"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764602_1960796509","id":"paragraph_1761570823910_901044706","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:38:02+0000","dateStarted":"2025-10-31T14:37:33+0000"},{"text":"%spark\n// Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\n// new df containing a decending list of total fare per location.\nprint(\"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\\n\")\nprint(\"new df containing a decending list of total fare per location.\\n\")\nval topTripTotalFare = df\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\n\t.groupBy(col(\"zone\"))\n\t.agg(round(sum(\"total_amount\"), 2).as(\"total_fare\"))\n\t.orderBy(desc(\"total_fare\"))\n\nprint(\"Print out top 10 results:\\n\")\ntopTripTotalFare.show(10, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:38:02+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\nnew df containing a decending list of total fare per location.\nPrint out top 10 results:\n+----------------------------+-------------+\n|zone                        |total_fare   |\n+----------------------------+-------------+\n|JFK Airport                 |8.745772521E7|\n|LaGuardia Airport           |4.902748448E7|\n|Midtown Center              |2.715074768E7|\n|Upper East Side South       |2.195396198E7|\n|Times Sq/Theatre District   |2.140392085E7|\n|Penn Station/Madison Sq West|1.958436281E7|\n|Upper East Side North       |1.908805917E7|\n|Midtown East                |1.882810439E7|\n|Midtown North               |1.568490028E7|\n|Lincoln Square East         |1.476928993E7|\n+----------------------------+-------------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripTotalFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, total_fare: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=220"},{"jobUrl":"http://localhost:4040/jobs/job?id=221"},{"jobUrl":"http://localhost:4040/jobs/job?id=222"},{"jobUrl":"http://localhost:4040/jobs/job?id=223"},{"jobUrl":"http://localhost:4040/jobs/job?id=224"},{"jobUrl":"http://localhost:4040/jobs/job?id=225"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764602_1089596063","id":"paragraph_1761782734781_1984210587","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:40:01+0000","dateStarted":"2025-10-31T14:38:04+0000"},{"text":"%spark\n// Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\n// new df containing a decending list of average tip per location.\nprint(\"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\\n\")\nprint(\"new df containing a decending list of average tip per location.\\n\")\nval topTripAvgTip = df\n\t.withColumn(\"zone\", col(\"pickup_location_name\"))\n\t.groupBy(col(\"zone\"))\n\t.agg(round(avg(\"tip_amount\"), 2).as(\"average_tip\"))\n\t.orderBy(desc(\"average_tip\"))\n\nprint(\"Print out top 10 results:\\n\")\ntopTripAvgTip.show(10, truncate = false)\n","user":"anonymous","dateUpdated":"2025-10-31T14:40:02+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.6.3 Aggregering: Top 10 Lokasjoner' in raport.\nnew df containing a decending list of average tip per location.\nPrint out top 10 results:\n+---------------------------------------------+-----------+\n|zone                                         |average_tip|\n+---------------------------------------------+-----------+\n|West Brighton                                |33.72      |\n|Oakwood                                      |22.57      |\n|Rossville/Woodrow                            |17.49      |\n|New Dorp/Midland Beach                       |16.25      |\n|Astoria Park                                 |15.9       |\n|Bloomfield/Emerson Hill                      |13.86      |\n|Governor's Island/Ellis Island/Liberty Island|11.5       |\n|Newark Airport                               |9.63       |\n|JFK Airport                                  |9.36       |\n|LaGuardia Airport                            |9.27       |\n+---------------------------------------------+-----------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopTripAvgTip\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [zone: string, average_tip: double]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=226"},{"jobUrl":"http://localhost:4040/jobs/job?id=227"},{"jobUrl":"http://localhost:4040/jobs/job?id=228"},{"jobUrl":"http://localhost:4040/jobs/job?id=229"},{"jobUrl":"http://localhost:4040/jobs/job?id=230"},{"jobUrl":"http://localhost:4040/jobs/job?id=231"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764603_616688281","id":"paragraph_1761782774059_1774448311","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:41:07+0000","dateStarted":"2025-10-31T14:40:04+0000"},{"text":"%spark\n// Ref. '2.2.7.1 Top 5 Soner Daglig Billettpris Liste' in raport.\n// A solution that rank the top 5 pickup zones by total fare.\n// Implemented with window, partitionBy and dense_rank.\nprint(\"Ref. '2.2.7.1 Top 5 Soner Daglig Billettpris Liste' in raport.\\n\")\nprint(\"A solution that rank the top 5 pickup zones by total fare.\\n\")\nprint(\"Implemented with window, partitionBy and dense_rank.\\n\")\n\n// Build a new df containing pickup dates, zone name and total fare.\nprint(\"Build a new df containing pickup dates, zone name and total fare.\\n\")\nval topFiveZonByTotFare = df\n    .withColumn(\n        \"day\",\n        col(\"tpep_pickup_datetime\").cast(\"timestamp\")\n        )\n    .withColumn(\n        \"week_day\",\n        col(\"pickup_day\")\n        )\n    .withColumn(\n        \"zone\",\n        col(\"pickup_location_name\")\n        )\n    .groupBy(\n        to_date(col(\"day\")).as(\"day\"),\n        col(\"week_day\"),\n        col(\"zone\")\n        )\n    .agg(round(sum(\"total_amount\"), 2).as(\"total_fare\"))\n    .orderBy(col(\"day\"))\n\n// Build the window function to implement on topFiveZonByTotFare.\nprint(\"Build the window function to implement on topFiveZonByTotFare.\\n\")\nval window = Window\n    .partitionBy(\"day\")\n    .orderBy(\"total_fare\")\n\n// Implement the window function to create a scoreboard of best total fare per zone per day down to the fifth rank.\n// Since we're using dense_rank, we will get more than five ranks on a day when total fare has the same sum on locations which are in the top ratings.\nprint(\"Implement the window function to create a scoreboard of best total fare per zone per day down to the fifth rank.\\n\")\nprint(\"Since we're using dense_rank, we will get more than five ranks on a day when total fare has the same sum on locations which are in the top ratings.\\n\")\ntopFiveZonByTotFare\n    .withColumn(\"rank\", dense_rank().over(window))\n    .filter(col(\"rank\") <= 5)\n    .show(50, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:41:07+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.7.1 Top 5 Soner Daglig Billettpris Liste' in raport.\nA solution that rank the top 5 pickup zones by total fare.\nImplemented with window, partitionBy and dense_rank.\nBuild a new df containing pickup dates, zone name and total fare.\nBuild the window function to implement on topFiveZonByTotFare.\nImplement the window function to create a scoreboard of best total fare per zone per day down to the fifth rank.\nSince we're using dense_rank, we will get more than five ranks on a day when total fare has the same sum on locations which are in the top ratings.\n+----------+--------+---------------------------------+----------+----+\n|day       |week_day|zone                             |total_fare|rank|\n+----------+--------+---------------------------------+----------+----+\n|2007-12-05|4       |Lincoln Square East              |22.75     |1   |\n|2009-01-01|5       |LaGuardia Airport                |170.27    |1   |\n|2024-12-31|3       |Old Astoria                      |10.4      |1   |\n|2024-12-31|3       |Corona                           |10.4      |1   |\n|2024-12-31|3       |Central Park                     |15.7      |2   |\n|2024-12-31|3       |Clinton East                     |17.16     |3   |\n|2024-12-31|3       |Murray Hill                      |18.0      |4   |\n|2024-12-31|3       |Lincoln Square East              |20.52     |5   |\n|2025-01-01|4       |Kingsbridge Heights              |9.4       |1   |\n|2025-01-01|4       |Belmont                          |12.5      |2   |\n|2025-01-01|4       |Sunset Park East                 |17.0      |3   |\n|2025-01-01|4       |Madison                          |19.0      |4   |\n|2025-01-01|4       |East New York/Pennsylvania Avenue|20.0      |5   |\n|2025-01-02|5       |Arrochar/Fort Wadsworth          |14.89     |1   |\n|2025-01-02|5       |Ozone Park                       |27.0      |2   |\n|2025-01-02|5       |North Corona                     |27.3      |3   |\n|2025-01-02|5       |Pelham Parkway                   |30.0      |4   |\n|2025-01-02|5       |Bushwick North                   |31.0      |5   |\n|2025-01-03|6       |Willets Point                    |4.5       |1   |\n|2025-01-03|6       |Charleston/Tottenville           |4.5       |1   |\n|2025-01-03|6       |Queensboro Hill                  |7.0       |2   |\n|2025-01-03|6       |Windsor Terrace                  |13.3      |3   |\n|2025-01-03|6       |Arrochar/Fort Wadsworth          |14.89     |4   |\n|2025-01-03|6       |Marine Park/Floyd Bennett Field  |18.0      |5   |\n|2025-01-04|7       |Pelham Bay                       |6.6       |1   |\n|2025-01-04|7       |Douglaston                       |14.6      |2   |\n|2025-01-04|7       |Arrochar/Fort Wadsworth          |14.89     |3   |\n|2025-01-04|7       |Columbia Street                  |17.5      |4   |\n|2025-01-04|7       |Brooklyn Navy Yard               |18.2      |5   |\n|2025-01-05|1       |Bayside                          |5.9       |1   |\n|2025-01-05|1       |South Beach/Dongan Hills         |7.3       |2   |\n|2025-01-05|1       |Great Kills                      |13.9      |3   |\n|2025-01-05|1       |Ocean Parkway South              |19.0      |4   |\n|2025-01-05|1       |Bellerose                        |23.5      |5   |\n|2025-01-06|2       |Marble Hill                      |6.6       |1   |\n|2025-01-06|2       |Queensboro Hill                  |7.0       |2   |\n|2025-01-06|2       |Stapleton                        |14.89     |3   |\n|2025-01-06|2       |Brooklyn Navy Yard               |23.58     |4   |\n|2025-01-06|2       |Glen Oaks                        |27.0      |5   |\n|2025-01-07|3       |Pelham Bay Park                  |4.5       |1   |\n|2025-01-07|3       |Auburndale                       |6.6       |2   |\n|2025-01-07|3       |Arrochar/Fort Wadsworth          |14.89     |3   |\n|2025-01-07|3       |South Williamsburg               |21.0      |4   |\n|2025-01-07|3       |Roosevelt Island                 |30.0      |5   |\n|2025-01-08|4       |Brooklyn Navy Yard               |11.8      |1   |\n|2025-01-08|4       |Queensboro Hill                  |14.0      |2   |\n|2025-01-08|4       |Whitestone                       |27.0      |3   |\n|2025-01-08|4       |East Flushing                    |32.0      |4   |\n|2025-01-08|4       |Arrochar/Fort Wadsworth          |36.72     |5   |\n|2025-01-09|5       |Manhattan Beach                  |17.0      |1   |\n+----------+--------+---------------------------------+----------+----+\nonly showing top 50 rows\n\n\u001b[1m\u001b[34mtopFiveZonByTotFare\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [day: date, week_day: int ... 2 more fields]\n\u001b[1m\u001b[34mwindow\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@1cb510a3\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=232"},{"jobUrl":"http://localhost:4040/jobs/job?id=233"},{"jobUrl":"http://localhost:4040/jobs/job?id=234"},{"jobUrl":"http://localhost:4040/jobs/job?id=235"},{"jobUrl":"http://localhost:4040/jobs/job?id=236"},{"jobUrl":"http://localhost:4040/jobs/job?id=237"},{"jobUrl":"http://localhost:4040/jobs/job?id=238"},{"jobUrl":"http://localhost:4040/jobs/job?id=239"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764604_1266937853","id":"paragraph_1761782820490_720341075","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:43:12+0000","dateStarted":"2025-10-31T14:41:07+0000"},{"text":"%spark\n// Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\nprint(\"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\\n\")\nprint(\"Failed attempt on the task:\\n\")\nval weekTripsPerBorough = df.alias(\"m\")\n    .join(\n        broadcast(dfZone.alias(\"z\")),\n        $\"m.PULocationID\" === $\"z.LocationID\",\n        \"left\"\n    )\n    .select(\n        $\"m.tpep_pickup_datetime\".as(\"year\"),\n        $\"m.tpep_pickup_datetime\".as(\"week\"),\n        $\"m.pickup_location_name\".as(\"zone\"),\n\t\t$\"z.Borough\".as(\"borough\")\n    )\n    .withColumn(\"year\", year(col(\"year\")))\n    .withColumn(\"week\", weekofyear(col(\"week\")))\n    .groupBy(col(\"borough\"), col(\"year\"), col(\"week\"))\n    .agg(count(\"*\").as(\"trips\"))\n    .orderBy(col(\"year\"), col(\"week\"), col(\"borough\"))\n\nval avgPerBoroughYear = weekTripsPerBorough\n    .groupBy(\"borough\", \"week\", \"year\")\n    .agg(round(avg(\"trips\"), 2).as(\"avg_trips_per_week\"))\n    .orderBy(\"year\", \"week\", \"borough\")\n\navgPerBoroughYear.show()","user":"anonymous","dateUpdated":"2025-10-31T14:43:13+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\nFailed attempt on the task:\n+-------------+----+----+------------------+\n|      borough|week|year|avg_trips_per_week|\n+-------------+----+----+------------------+\n|    Manhattan|  49|2007|               1.0|\n|       Queens|   1|2009|               2.0|\n|    Manhattan|   1|2024|              16.0|\n|       Queens|   1|2024|               4.0|\n|        Bronx|   1|2025|             935.0|\n|     Brooklyn|   1|2025|            3946.0|\n|          EWR|   1|2025|             127.0|\n|    Manhattan|   1|2025|          347269.0|\n|          N/A|   1|2025|             295.0|\n|       Queens|   1|2025|           44740.0|\n|Staten Island|   1|2025|              15.0|\n|      Unknown|   1|2025|            1078.0|\n|        Bronx|   2|2025|            1276.0|\n|     Brooklyn|   2|2025|            5582.0|\n|          EWR|   2|2025|              61.0|\n|    Manhattan|   2|2025|          572051.0|\n|          N/A|   2|2025|             245.0|\n|       Queens|   2|2025|           58208.0|\n|Staten Island|   2|2025|              24.0|\n|      Unknown|   2|2025|            1740.0|\n+-------------+----+----+------------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mweekTripsPerBorough\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, year: int ... 2 more fields]\n\u001b[1m\u001b[34mavgPerBoroughYear\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, week: int ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=240"},{"jobUrl":"http://localhost:4040/jobs/job?id=241"},{"jobUrl":"http://localhost:4040/jobs/job?id=242"},{"jobUrl":"http://localhost:4040/jobs/job?id=243"},{"jobUrl":"http://localhost:4040/jobs/job?id=244"},{"jobUrl":"http://localhost:4040/jobs/job?id=245"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764606_1659056208","id":"paragraph_1761782889852_905666438","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:44:56+0000","dateStarted":"2025-10-31T14:43:14+0000"},{"text":"%spark\n// Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\nprint(\"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\\n\")\nprint(\"Failed attempt on the task:\\n\")\nval window = Window.partitionBy(\"borough\").orderBy(col(\"week\"), col(\"year\"))\n\nval sevenDayavgOfTripsPerBorough = avgPerBoroughYear\n    .withColumn(\"total_avg\", rank().over(window))\n    .orderBy(col(\"borough\"), col(\"week\"))\n\nsevenDayavgOfTripsPerBorough.show()","user":"anonymous","dateUpdated":"2025-10-31T14:44:56+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\nFailed attempt on the task:\n+-------+----+----+------------------+---------+\n|borough|week|year|avg_trips_per_week|total_avg|\n+-------+----+----+------------------+---------+\n|  Bronx|   1|2025|             935.0|        1|\n|  Bronx|   2|2025|            1276.0|        2|\n|  Bronx|   3|2025|            1587.0|        3|\n|  Bronx|   4|2025|            1445.0|        4|\n|  Bronx|   5|2025|            1676.0|        5|\n|  Bronx|   6|2025|            1519.0|        6|\n|  Bronx|   7|2025|            1518.0|        7|\n|  Bronx|   8|2025|            1542.0|        8|\n|  Bronx|   9|2025|            1770.0|        9|\n|  Bronx|  10|2025|            1675.0|       10|\n|  Bronx|  11|2025|            1652.0|       11|\n|  Bronx|  12|2025|            1808.0|       12|\n|  Bronx|  13|2025|            1754.0|       13|\n|  Bronx|  14|2025|            1813.0|       14|\n|  Bronx|  15|2025|            1776.0|       15|\n|  Bronx|  16|2025|            1747.0|       16|\n|  Bronx|  17|2025|            1964.0|       17|\n|  Bronx|  18|2025|            1921.0|       18|\n|  Bronx|  19|2025|            1782.0|       19|\n|  Bronx|  20|2025|            1781.0|       20|\n+-------+----+----+------------------+---------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mwindow\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@27f2778c\n\u001b[1m\u001b[34msevenDayavgOfTripsPerBorough\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, week: int ... 3 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=246"},{"jobUrl":"http://localhost:4040/jobs/job?id=247"},{"jobUrl":"http://localhost:4040/jobs/job?id=248"},{"jobUrl":"http://localhost:4040/jobs/job?id=249"},{"jobUrl":"http://localhost:4040/jobs/job?id=250"},{"jobUrl":"http://localhost:4040/jobs/job?id=251"},{"jobUrl":"http://localhost:4040/jobs/job?id=252"},{"jobUrl":"http://localhost:4040/jobs/job?id=253"},{"jobUrl":"http://localhost:4040/jobs/job?id=254"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764607_797568218","id":"paragraph_1761783103733_393942721","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:46:09+0000","dateStarted":"2025-10-31T14:44:57+0000"},{"text":"%spark\n// Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\n// 1) Join trips → zones to get borough, derive calendar day (localize if needed)\nprint(\"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\\n\")\nprint(\"1) Join trips → zones to get borough, derive calendar day (localize if needed).\\n\")\nval tripsPerDay =\n  df.alias(\"t\")\n    .join(broadcast(dfZone.alias(\"z\")), $\"t.PULocationID\" === $\"z.LocationID\", \"left\")\n    .withColumn(\"pickup_ts\", col(\"t.tpep_pickup_datetime\").cast(\"timestamp\"))\n    .withColumn(\"day\", to_date($\"pickup_ts\"))\n    .groupBy($\"z.Borough\".as(\"borough\"), $\"day\")\n    .agg(count(lit(1)).as(\"daily_trips\"))\n\n// 2) Fill missing days with zero per borough (so the average isn’t biased)\nprint(\"2) Fill missing days with zero per borough (so the average isn’t biased).\\n\")\nval dayBounds =\n  tripsPerDay.groupBy(\"borough\")\n    .agg(min($\"day\").as(\"min_day\"), max($\"day\").as(\"max_day\"))\n\nval calendar =\n  dayBounds.select(\n    $\"borough\",\n    explode(sequence($\"min_day\", $\"max_day\", expr(\"interval 1 day\"))).as(\"day\")\n  )\n\nval dailyFilled =\n  calendar.join(tripsPerDay, Seq(\"borough\",\"day\"), \"left\")\n          .select($\"borough\", $\"day\", coalesce($\"daily_trips\", lit(0L)).as(\"daily_trips\"))\n\n// 3) 7-day trailing moving average (current day + previous 6)\nprint(\"3) 7-day trailing moving average (current day + previous 6).\\n\")\nval w = Window.partitionBy(\"borough\").orderBy($\"day\").rowsBetween(-6, 0)\n\nval tripsWithMA7 =\n  dailyFilled\n    .withColumn(\"trips_ma7\", round(avg($\"daily_trips\").over(w), 2))\n    .orderBy($\"borough\", $\"day\")\n\nprint(\"Result:\\n\")\ntripsWithMA7.show(50, truncate = false)","user":"anonymous","dateUpdated":"2025-10-31T14:46:09+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.7.2 7-dagers glidende gjennomsnitt av turer per bydel.' in raport.\n1) Join trips → zones to get borough, derive calendar day (localize if needed).\n2) Fill missing days with zero per borough (so the average isn’t biased).\n3) 7-day trailing moving average (current day + previous 6).\nResult:\n+-------+----------+-----------+---------+\n|borough|day       |daily_trips|trips_ma7|\n+-------+----------+-----------+---------+\n|Bronx  |2025-01-01|137        |137.0    |\n|Bronx  |2025-01-02|240        |188.5    |\n|Bronx  |2025-01-03|246        |207.67   |\n|Bronx  |2025-01-04|167        |197.5    |\n|Bronx  |2025-01-05|145        |187.0    |\n|Bronx  |2025-01-06|175        |185.0    |\n|Bronx  |2025-01-07|205        |187.86   |\n|Bronx  |2025-01-08|179        |193.86   |\n|Bronx  |2025-01-09|191        |186.86   |\n|Bronx  |2025-01-10|207        |181.29   |\n|Bronx  |2025-01-11|167        |181.29   |\n|Bronx  |2025-01-12|152        |182.29   |\n|Bronx  |2025-01-13|236        |191.0    |\n|Bronx  |2025-01-14|240        |196.0    |\n|Bronx  |2025-01-15|276        |209.86   |\n|Bronx  |2025-01-16|268        |220.86   |\n|Bronx  |2025-01-17|220        |222.71   |\n|Bronx  |2025-01-18|197        |227.0    |\n|Bronx  |2025-01-19|150        |226.71   |\n|Bronx  |2025-01-20|84         |205.0    |\n|Bronx  |2025-01-21|240        |205.0    |\n|Bronx  |2025-01-22|223        |197.43   |\n|Bronx  |2025-01-23|299        |201.86   |\n|Bronx  |2025-01-24|249        |206.0    |\n|Bronx  |2025-01-25|180        |203.57   |\n|Bronx  |2025-01-26|170        |206.43   |\n|Bronx  |2025-01-27|281        |234.57   |\n|Bronx  |2025-01-28|267        |238.43   |\n|Bronx  |2025-01-29|253        |242.71   |\n|Bronx  |2025-01-30|245        |235.0    |\n|Bronx  |2025-01-31|274        |238.57   |\n|Bronx  |2025-02-01|176        |238.0    |\n|Bronx  |2025-02-02|180        |239.43   |\n|Bronx  |2025-02-03|251        |235.14   |\n|Bronx  |2025-02-04|234        |230.43   |\n|Bronx  |2025-02-05|267        |232.43   |\n|Bronx  |2025-02-06|206        |226.86   |\n|Bronx  |2025-02-07|290        |229.14   |\n|Bronx  |2025-02-08|158        |226.57   |\n|Bronx  |2025-02-09|113        |217.0    |\n|Bronx  |2025-02-10|254        |217.43   |\n|Bronx  |2025-02-11|237        |217.86   |\n|Bronx  |2025-02-12|234        |213.14   |\n|Bronx  |2025-02-13|263        |221.29   |\n|Bronx  |2025-02-14|235        |213.43   |\n|Bronx  |2025-02-15|177        |216.14   |\n|Bronx  |2025-02-16|118        |216.86   |\n|Bronx  |2025-02-17|106        |195.71   |\n|Bronx  |2025-02-18|255        |198.29   |\n|Bronx  |2025-02-19|259        |201.86   |\n+-------+----------+-----------+---------+\nonly showing top 50 rows\n\n\u001b[1m\u001b[34mtripsPerDay\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date ... 1 more field]\n\u001b[1m\u001b[34mdayBounds\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, min_day: date ... 1 more field]\n\u001b[1m\u001b[34mcalendar\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date]\n\u001b[1m\u001b[34mdailyFilled\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [borough: string, day: date ... 1 more field]\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@7920dc0d\n\u001b[1m\u001b[34mtripsWithMA7\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [borough: string, day: date ... 2 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=255"},{"jobUrl":"http://localhost:4040/jobs/job?id=256"},{"jobUrl":"http://localhost:4040/jobs/job?id=257"},{"jobUrl":"http://localhost:4040/jobs/job?id=258"},{"jobUrl":"http://localhost:4040/jobs/job?id=259"},{"jobUrl":"http://localhost:4040/jobs/job?id=260"},{"jobUrl":"http://localhost:4040/jobs/job?id=261"},{"jobUrl":"http://localhost:4040/jobs/job?id=262"},{"jobUrl":"http://localhost:4040/jobs/job?id=263"},{"jobUrl":"http://localhost:4040/jobs/job?id=264"},{"jobUrl":"http://localhost:4040/jobs/job?id=265"},{"jobUrl":"http://localhost:4040/jobs/job?id=266"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764608_670659932","id":"paragraph_1761783163069_993876284","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:19+0000","dateStarted":"2025-10-31T14:46:09+0000"},{"text":"%spark\n// Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\nprint(\"Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\\n\")\n\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.storage.StorageLevel\n\ndef timed[T](label: String)(thunk: => T): T = {\n  val t0 = System.nanoTime()\n  val out = thunk\n  val ms = (System.nanoTime() - t0) / 1e6\n  println(f\"⏱  $label took $ms%.1f ms\")\n  out\n}\n\n// Materialize and time a DF\ndef bench(df: DataFrame, label: String = \"action\"): Long =\n  timed(label){ df.count() } // count() is a cheap “force” for joins\n\ndef printPlan(df: DataFrame, label: String): Unit = {\n  println(s\"\\n==== $label ====\")\n  df.explain(\"formatted\")   // look for BroadcastHashJoin vs SortMergeJoin\n}\n","user":"anonymous","dateUpdated":"2025-10-31T14:48:19+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mtimed\u001b[0m: \u001b[1m\u001b[32m[T](label: String)(thunk: => T)T\u001b[0m\n\u001b[1m\u001b[34mbench\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, label: String)Long\u001b[0m\n\u001b[1m\u001b[34mprintPlan\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, label: String)Unit\u001b[0m\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764612_1661510723","id":"paragraph_1761783182817_1927674422","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:21+0000","dateStarted":"2025-10-31T14:48:19+0000"},{"text":"%spark\n// Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\n// Import of TCL and MapZone data for performance tuning:\nprint(\"Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\\n\")\nprint(\"Import of TCL and MapZone data for performance tuning:\\n\")\n\n// Define Schema for TCL.\nval refPath1 = \"/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\"\nval refSchema1 = spark.read.parquet(refPath1).schema\n\n// Define path for datafiles.\n\nval base1 = (\"/sparkio/TLC/trips/2025/yellow*.parquet\")\n\n// Load data into a DataFrame.\nval dfTuning = spark.read\n\t.option(\"recursiveFileLookup\", true)\n\t.schema(refSchema1)\n\t.parquet(base1)\n\n//File location.\nval base2 = (\"/sparkio/TLC/mapZones/taxi_zone_lookup.csv\")\n\n// Custom schema (LocationID got defined as a string without).\nval zoneSchema = StructType(Array(\n    StructField(\"LocationID\", IntegerType, true),\n    StructField(\"Borough\", StringType, true),\n    StructField(\"Zone\", StringType, true),\n    StructField(\"service_zone\", StringType, true)\n))\n\n// Import of data to df.\nval dfZoneTuning = spark.read\n\t.option(\"header\", \"true\")\n    .schema(zoneSchema)\n    .csv(base2)","user":"anonymous","dateUpdated":"2025-10-31T14:48:21+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.1 Oppretter Måleverktøy' in raport.\nImport of TCL and MapZone data for performance tuning:\n\u001b[1m\u001b[34mrefPath1\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet\n\u001b[1m\u001b[34mrefSchema1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(VendorID,IntegerType,true),StructField(tpep_pickup_datetime,TimestampNTZType,true),StructField(tpep_dropoff_datetime,TimestampNTZType,true),StructField(passenger_count,LongType,true),StructField(trip_distance,DoubleType,true),StructField(RatecodeID,LongType,true),StructField(store_and_fwd_flag,StringType,true),StructField(PULocationID,IntegerType,true),StructField(DOLocationID,IntegerType,true),StructField(payment_type,LongType,true),StructField(fare_amount,DoubleType,true),StructField(extra,DoubleType,true),StructField(mta_tax,DoubleType,true),StructField(tip_amount,DoubleType,true),Stru...\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=267"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764613_2139995300","id":"paragraph_1761783319813_1091950970","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:23+0000","dateStarted":"2025-10-31T14:48:21+0000"},{"text":"%spark\n// Ref. '2.2.8.2 Demonstrasjons av ’non-broadcast’ join' in raport.\n// Turn off auto-broadcast\nprint(\"Ref. '2.2.8.2 Demonstrasjons av ’non-broadcast’ join' in raport.\\n\")\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\n\nval joinNoBroadcast =\n  dfTuning\n    .join(dfZoneTuning, dfTuning(\"PULocationID\") === dfZoneTuning(\"LocationID\"), \"left\")\n    .select(dfTuning(\"*\"), dfZoneTuning(\"Borough\").as(\"PU_Borough\"), dfZoneTuning(\"Zone\").as(\"PU_Zone\"))\n\nprintPlan(joinNoBroadcast, \"NO BROADCAST PLAN\")\nbench(joinNoBroadcast, \"no-broadcast join materialize\")","user":"anonymous","dateUpdated":"2025-10-31T14:48:23+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.2 Demonstrasjons av ’non-broadcast’ join' in raport.\n\n==== NO BROADCAST PLAN ====\n== Physical Plan ==\nAdaptiveSparkPlan (10)\n+- Project (9)\n   +- SortMergeJoin LeftOuter (8)\n      :- Sort (3)\n      :  +- Exchange (2)\n      :     +- Scan parquet  (1)\n      +- Sort (7)\n         +- Exchange (6)\n            +- Filter (5)\n               +- Scan csv  (4)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Exchange\nInput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nArguments: hashpartitioning(PULocationID#7156, 200), ENSURE_REQUIREMENTS, [plan_id=14808]\n\n(3) Sort\nInput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nArguments: [PULocationID#7156 ASC NULLS FIRST], false, 0\n\n(4) Scan csv \nOutput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string>\n\n(5) Filter\nInput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nCondition : isnotnull(LocationID#7189)\n\n(6) Exchange\nInput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nArguments: hashpartitioning(LocationID#7189, 200), ENSURE_REQUIREMENTS, [plan_id=14809]\n\n(7) Sort\nInput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nArguments: [LocationID#7189 ASC NULLS FIRST], false, 0\n\n(8) SortMergeJoin\nLeft keys [1]: [PULocationID#7156]\nRight keys [1]: [LocationID#7189]\nJoin type: LeftOuter\nJoin condition: None\n\n(9) Project\nOutput [22]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, Borough#7190 AS PU_Borough#7247, Zone#7191 AS PU_Zone#7248]\nInput [23]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, LocationID#7189, Borough#7190, Zone#7191]\n\n(10) AdaptiveSparkPlan\nOutput [22]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, PU_Borough#7247, PU_Zone#7248]\nArguments: isFinalPlan=false\n\n\n⏱  no-broadcast join materialize took 19425.7 ms\n\u001b[1m\u001b[34mjoinNoBroadcast\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 20 more fields]\n\u001b[1m\u001b[34mres94\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=268"},{"jobUrl":"http://localhost:4040/jobs/job?id=269"},{"jobUrl":"http://localhost:4040/jobs/job?id=270"},{"jobUrl":"http://localhost:4040/jobs/job?id=271"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764614_56373910","id":"paragraph_1761783459104_1192680323","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:43+0000","dateStarted":"2025-10-31T14:48:23+0000"},{"text":"%spark\n// Ref. '2.2.8.3 Demonstrasjons av ’broadcast’ join' in raport.\nprint(\"Ref. '2.2.8.3 Demonstrasjons av ’broadcast’ join' in raport.\\n\")\nimport org.apache.spark.sql.functions.broadcast\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", 100*1024*1024) // 100MB\n\nval joinBroadcast =\n  dfTuning\n    .join(broadcast(dfZoneTuning), dfTuning(\"PULocationID\") === dfZoneTuning(\"LocationID\"), \"left\")\n    .select(dfTuning(\"*\"), dfZoneTuning(\"Borough\").as(\"PU_Borough\"), dfZoneTuning(\"Zone\").as(\"PU_Zone\"))\n\nprintPlan(joinBroadcast, \"BROADCAST PLAN\")\nbench(joinBroadcast, \"broadcast join materialize\")","user":"anonymous","dateUpdated":"2025-10-31T14:48:43+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.3 Demonstrasjons av ’broadcast’ join' in raport.\n\n==== BROADCAST PLAN ====\n== Physical Plan ==\nAdaptiveSparkPlan (7)\n+- Project (6)\n   +- BroadcastHashJoin LeftOuter BuildRight (5)\n      :- Scan parquet  (1)\n      +- BroadcastExchange (4)\n         +- Filter (3)\n            +- Scan csv  (2)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Scan csv \nOutput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string>\n\n(3) Filter\nInput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nCondition : isnotnull(LocationID#7189)\n\n(4) BroadcastExchange\nInput [3]: [LocationID#7189, Borough#7190, Zone#7191]\nArguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15028]\n\n(5) BroadcastHashJoin\nLeft keys [1]: [PULocationID#7156]\nRight keys [1]: [LocationID#7189]\nJoin type: LeftOuter\nJoin condition: None\n\n(6) Project\nOutput [22]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, Borough#7190 AS PU_Borough#7347, Zone#7191 AS PU_Zone#7348]\nInput [23]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, LocationID#7189, Borough#7190, Zone#7191]\n\n(7) AdaptiveSparkPlan\nOutput [22]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, PU_Borough#7347, PU_Zone#7348]\nArguments: isFinalPlan=false\n\n\n⏱  broadcast join materialize took 1519.8 ms\nimport org.apache.spark.sql.functions.broadcast\n\u001b[1m\u001b[34mjoinBroadcast\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 20 more fields]\n\u001b[1m\u001b[34mres95\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=272"},{"jobUrl":"http://localhost:4040/jobs/job?id=273"},{"jobUrl":"http://localhost:4040/jobs/job?id=274"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764617_775813353","id":"paragraph_1761783473445_1991666679","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:46+0000","dateStarted":"2025-10-31T14:48:43+0000"},{"text":"%spark\n// Ref. '2.2.8.4 Salting' in raport.\nprint(\"Ref. '2.2.8.4 Salting' in raport.\\n\")\n\nval topPulocs =\n  dfTuning.groupBy($\"PULocationID\").count().orderBy(desc(\"count\"))\ntopPulocs.show(10, truncate=false)","user":"anonymous","dateUpdated":"2025-10-31T14:48:46+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.4 Salting' in raport.\n+------------+-------+\n|PULocationID|count  |\n+------------+-------+\n|161         |1237444|\n|237         |1213320|\n|132         |1161803|\n|236         |1080997|\n|230         |904472 |\n|186         |883575 |\n|162         |873365 |\n|142         |801744 |\n|234         |752946 |\n|170         |751846 |\n+------------+-------+\nonly showing top 10 rows\n\n\u001b[1m\u001b[34mtopPulocs\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [PULocationID: int, count: bigint]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=275"},{"jobUrl":"http://localhost:4040/jobs/job?id=276"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764619_1416915580","id":"paragraph_1761784019597_1092920128","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:49+0000","dateStarted":"2025-10-31T14:48:46+0000"},{"text":"%spark\n// Ref. '2.2.8.4 Salting' in raport.\nprint(\"Ref. '2.2.8.4 Salting' in raport.\\n\")\n\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\nval heavyKeys = Seq(161, 237, 132, 236)","user":"anonymous","dateUpdated":"2025-10-31T14:48:49+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.4 Salting' in raport.\n\u001b[1m\u001b[34mheavyKeys\u001b[0m: \u001b[1m\u001b[32mSeq[Int]\u001b[0m = List(161, 237, 132, 236)\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764620_1243441802","id":"paragraph_1761784122458_1360163211","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:50+0000","dateStarted":"2025-10-31T14:48:49+0000"},{"text":"%spark\n// Ref. '2.2.8.4 Salting' in raport.\nprint(\"Ref. '2.2.8.4 Salting' in raport.\\n\")\n\nval joinedSkew =\n  dfTuning\n    .join(dfZoneTuning, $\"PULocationID\" === $\"LocationID\") // no broadcast, skewed key\n    .select($\"trip_distance\", $\"PULocationID\", $\"Zone\")\n\nprintPlan(joinedSkew, \"SKEWED JOIN (unsalted)\")\nbench(joinedSkew, \"unsalted skewed join\")\n","user":"anonymous","dateUpdated":"2025-10-31T14:48:50+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.4 Salting' in raport.\n\n==== SKEWED JOIN (unsalted) ====\n== Physical Plan ==\nAdaptiveSparkPlan (11)\n+- Project (10)\n   +- SortMergeJoin Inner (9)\n      :- Sort (4)\n      :  +- Exchange (3)\n      :     +- Filter (2)\n      :        +- Scan parquet  (1)\n      +- Sort (8)\n         +- Exchange (7)\n            +- Filter (6)\n               +- Scan csv  (5)\n\n\n(1) Scan parquet \nOutput [2]: [trip_distance#7153, PULocationID#7156]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nPushedFilters: [IsNotNull(PULocationID)]\nReadSchema: struct<trip_distance:double,PULocationID:int>\n\n(2) Filter\nInput [2]: [trip_distance#7153, PULocationID#7156]\nCondition : isnotnull(PULocationID#7156)\n\n(3) Exchange\nInput [2]: [trip_distance#7153, PULocationID#7156]\nArguments: hashpartitioning(PULocationID#7156, 200), ENSURE_REQUIREMENTS, [plan_id=15224]\n\n(4) Sort\nInput [2]: [trip_distance#7153, PULocationID#7156]\nArguments: [PULocationID#7156 ASC NULLS FIRST], false, 0\n\n(5) Scan csv \nOutput [2]: [LocationID#7189, Zone#7191]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Zone:string>\n\n(6) Filter\nInput [2]: [LocationID#7189, Zone#7191]\nCondition : isnotnull(LocationID#7189)\n\n(7) Exchange\nInput [2]: [LocationID#7189, Zone#7191]\nArguments: hashpartitioning(LocationID#7189, 200), ENSURE_REQUIREMENTS, [plan_id=15225]\n\n(8) Sort\nInput [2]: [LocationID#7189, Zone#7191]\nArguments: [LocationID#7189 ASC NULLS FIRST], false, 0\n\n(9) SortMergeJoin\nLeft keys [1]: [PULocationID#7156]\nRight keys [1]: [LocationID#7189]\nJoin type: Inner\nJoin condition: None\n\n(10) Project\nOutput [3]: [trip_distance#7153, PULocationID#7156, Zone#7191]\nInput [4]: [trip_distance#7153, PULocationID#7156, LocationID#7189, Zone#7191]\n\n(11) AdaptiveSparkPlan\nOutput [3]: [trip_distance#7153, PULocationID#7156, Zone#7191]\nArguments: isFinalPlan=false\n\n\n⏱  unsalted skewed join took 9094.6 ms\n\u001b[1m\u001b[34mjoinedSkew\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [trip_distance: double, PULocationID: int ... 1 more field]\n\u001b[1m\u001b[34mres97\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=277"},{"jobUrl":"http://localhost:4040/jobs/job?id=278"},{"jobUrl":"http://localhost:4040/jobs/job?id=279"},{"jobUrl":"http://localhost:4040/jobs/job?id=280"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764621_567692986","id":"paragraph_1761784138812_137172786","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:48:59+0000","dateStarted":"2025-10-31T14:48:50+0000"},{"text":"%spark\n// Ref. '2.2.8.4 Salting' in raport.\nprint(\"Ref. '2.2.8.4 Salting' in raport.\\n\")\n\nval saltBuckets = 16\n\n// Left (big) side: assign salt for heavy keys; keep 0 for others\nval dfSalted =\n  dfTuning.withColumn(\n    \"salt\",\n    when(col(\"PULocationID\").isin(heavyKeys:_*),\n         pmod(hash(col(\"tpep_pickup_datetime\")), lit(saltBuckets)) // deterministic spread\n    ).otherwise(lit(0))\n  )\n\n// Right (small) side: replicate heavy keys across all salt buckets; keep 0 for others\nval dfZoneSalted =\n  dfZoneTuning\n    .withColumn(\n      \"salt_array\",\n      when(col(\"LocationID\").isin(heavyKeys:_*),\n           sequence(lit(0), lit(saltBuckets - 1)) // 0..N-1\n      ).otherwise(array(lit(0)))\n    )\n    .withColumn(\"salt\", explode(col(\"salt_array\")))\n    .drop(\"salt_array\")\n\nval joinedSalted =\n  dfSalted\n    .join(dfZoneSalted,\n          dfSalted(\"PULocationID\") === dfZoneSalted(\"LocationID\") &&\n          dfSalted(\"salt\") === dfZoneSalted(\"salt\"))\n    .drop(dfZoneSalted(\"salt\"))\n\nprintPlan(joinedSalted, \"SKEWED JOIN (salted)\")\nbench(joinedSalted, \"salted skewed join\")\n","user":"anonymous","dateUpdated":"2025-10-31T14:49:00+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.4 Salting' in raport.\n\n==== SKEWED JOIN (salted) ====\n== Physical Plan ==\nAdaptiveSparkPlan (14)\n+- Project (13)\n   +- SortMergeJoin Inner (12)\n      :- Sort (5)\n      :  +- Exchange (4)\n      :     +- Project (3)\n      :        +- Filter (2)\n      :           +- Scan parquet  (1)\n      +- Sort (11)\n         +- Exchange (10)\n            +- Generate (9)\n               +- Project (8)\n                  +- Filter (7)\n                     +- Scan csv  (6)\n\n\n(1) Scan parquet \nOutput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nBatched: true\nLocation: InMemoryFileIndex [file:/sparkio/TLC/trips/2025/yellow_tripdata_2025-01.parquet, ... 6 entries]\nPushedFilters: [IsNotNull(PULocationID)]\nReadSchema: struct<VendorID:int,tpep_pickup_datetime:timestamp_ntz,tpep_dropoff_datetime:timestamp_ntz,passenger_count:bigint,trip_distance:double,RatecodeID:bigint,store_and_fwd_flag:string,PULocationID:int,DOLocationID:int,payment_type:bigint,fare_amount:double,extra:double,mta_tax:double,tip_amount:double,tolls_amount:double,improvement_surcharge:double,total_amount:double,congestion_surcharge:double,Airport_fee:double,cbd_congestion_fee:double>\n\n(2) Filter\nInput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\nCondition : (isnotnull(PULocationID#7156) AND CASE WHEN PULocationID#7156 IN (161,237,132,236) THEN isnotnull(pmod(hash(tpep_pickup_datetime#7150, 42), 16)) ELSE true END)\n\n(3) Project\nOutput [21]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, CASE WHEN PULocationID#7156 IN (161,237,132,236) THEN pmod(hash(tpep_pickup_datetime#7150, 42), 16) ELSE 0 END AS salt#7494]\nInput [20]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168]\n\n(4) Exchange\nInput [21]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, salt#7494]\nArguments: hashpartitioning(PULocationID#7156, salt#7494, 200), ENSURE_REQUIREMENTS, [plan_id=15461]\n\n(5) Sort\nInput [21]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, salt#7494]\nArguments: [PULocationID#7156 ASC NULLS FIRST, salt#7494 ASC NULLS FIRST], false, 0\n\n(6) Scan csv \nOutput [4]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192]\nBatched: false\nLocation: InMemoryFileIndex [file:/sparkio/TLC/mapZones/taxi_zone_lookup.csv]\nPushedFilters: [IsNotNull(LocationID)]\nReadSchema: struct<LocationID:int,Borough:string,Zone:string,service_zone:string>\n\n(7) Filter\nInput [4]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192]\nCondition : ((size(CASE WHEN LocationID#7189 IN (161,237,132,236) THEN org.apache.spark.sql.catalyst.expressions.UnsafeArrayData@f1dd012b ELSE [0] END, true) > 0) AND isnotnull(LocationID#7189))\n\n(8) Project\nOutput [5]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192, CASE WHEN LocationID#7189 IN (161,237,132,236) THEN org.apache.spark.sql.catalyst.expressions.UnsafeArrayData@f1dd012b ELSE [0] END AS salt_array#7516]\nInput [4]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192]\n\n(9) Generate\nInput [5]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192, salt_array#7516]\nArguments: explode(salt_array#7516), [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192], false, [salt#7523]\n\n(10) Exchange\nInput [5]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192, salt#7523]\nArguments: hashpartitioning(LocationID#7189, salt#7523, 200), ENSURE_REQUIREMENTS, [plan_id=15462]\n\n(11) Sort\nInput [5]: [LocationID#7189, Borough#7190, Zone#7191, service_zone#7192, salt#7523]\nArguments: [LocationID#7189 ASC NULLS FIRST, salt#7523 ASC NULLS FIRST], false, 0\n\n(12) SortMergeJoin\nLeft keys [2]: [PULocationID#7156, salt#7494]\nRight keys [2]: [LocationID#7189, salt#7523]\nJoin type: Inner\nJoin condition: None\n\n(13) Project\nOutput [25]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, salt#7494, LocationID#7189, Borough#7190, Zone#7191, service_zone#7192]\nInput [26]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, salt#7494, LocationID#7189, Borough#7190, Zone#7191, service_zone#7192, salt#7523]\n\n(14) AdaptiveSparkPlan\nOutput [25]: [VendorID#7149, tpep_pickup_datetime#7150, tpep_dropoff_datetime#7151, passenger_count#7152L, trip_distance#7153, RatecodeID#7154L, store_and_fwd_flag#7155, PULocationID#7156, DOLocationID#7157, payment_type#7158L, fare_amount#7159, extra#7160, mta_tax#7161, tip_amount#7162, tolls_amount#7163, improvement_surcharge#7164, total_amount#7165, congestion_surcharge#7166, Airport_fee#7167, cbd_congestion_fee#7168, salt#7494, LocationID#7189, Borough#7190, Zone#7191, service_zone#7192]\nArguments: isFinalPlan=false\n\n\n⏱  salted skewed join took 34696.8 ms\n\u001b[1m\u001b[34msaltBuckets\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 16\n\u001b[1m\u001b[34mdfSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 19 more fields]\n\u001b[1m\u001b[34mdfZoneSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [LocationID: int, Borough: string ... 3 more fields]\n\u001b[1m\u001b[34mjoinedSalted\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [VendorID: int, tpep_pickup_datetime: timestamp_ntz ... 23 more fields]\n\u001b[1m\u001b[34mres98\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 27982347\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=281"},{"jobUrl":"http://localhost:4040/jobs/job?id=282"},{"jobUrl":"http://localhost:4040/jobs/job?id=283"},{"jobUrl":"http://localhost:4040/jobs/job?id=284"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764623_1842495798","id":"paragraph_1761784151635_2094585390","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:49:36+0000","dateStarted":"2025-10-31T14:49:00+0000"},{"text":"%spark\n// Ref. '2.2.8.5 Caching' in raport.\nprint(\"Ref. '2.2.8.5 Caching' in raport.\\n\")\n\nval base = dfTuning.select(\"PULocationID\", \"tpep_pickup_datetime\", \"trip_distance\")\nbase.persist(StorageLevel.MEMORY_AND_DISK)\nbase.count() // materialize\n\nval run1 = bench(base.filter($\"trip_distance\" > 3), \"cached path 1\")\nval run2 = bench(base.filter($\"trip_distance\" <= 3), \"cached path 2\")\n\nbase.unpersist(true)\n","user":"anonymous","dateUpdated":"2025-10-31T14:49:36+0000","progress":0,"config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Ref. '2.2.8.5 Caching' in raport.\n⏱  cached path 1 took 707.7 ms\n⏱  cached path 2 took 782.6 ms\n\u001b[1m\u001b[34mbase\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [PULocationID: int, tpep_pickup_datetime: timestamp_ntz ... 1 more field]\n\u001b[1m\u001b[34mrun1\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 8312574\n\u001b[1m\u001b[34mrun2\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m = 19669773\n\u001b[1m\u001b[34mres99\u001b[0m: \u001b[1m\u001b[32mbase.type\u001b[0m = [PULocationID: int, tpep_pickup_datetime: timestamp_ntz ... 1 more field]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://localhost:4040/jobs/job?id=285"},{"jobUrl":"http://localhost:4040/jobs/job?id=286"},{"jobUrl":"http://localhost:4040/jobs/job?id=287"},{"jobUrl":"http://localhost:4040/jobs/job?id=288"},{"jobUrl":"http://localhost:4040/jobs/job?id=289"},{"jobUrl":"http://localhost:4040/jobs/job?id=290"},{"jobUrl":"http://localhost:4040/jobs/job?id=291"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1761920764628_1870596283","id":"paragraph_1761784205830_2073659519","dateCreated":"2025-10-31T14:26:04+0000","status":"FINISHED","dateFinished":"2025-10-31T14:49:49+0000","dateStarted":"2025-10-31T14:49:36+0000"}],"name":"Milestone1_TLC_Main_spark","id":"2M8BRTE58","defaultInterpreterGroup":"spark","version":"0.12.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/Milestone1_TLC_Main_spark"}